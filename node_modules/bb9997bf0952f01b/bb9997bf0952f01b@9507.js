import define1 from "./e0c65407ca22d243@412.js";

function _1(md){return(
md`# Amplia Saúde - Trilhas Exploratórias - v4.0 - Mortalidade`
)}

function _cabecalho(html,copyLinkButton){return(
html`
    <style>
@import url("https://fonts.googleapis.com/css2?family=Roboto+Condensed:wght@300;400;700&display=swap");
@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;700&display=swap');

.cabecalho{
  display:inline-block;
  width:100%;
  border-bottom:1px solid #9C9C9C;
}

.cabecalho-conteudo{
  display: inline-block;
  vertical-align: middle;
  margin-bottom: 6px;
}
      
.titulo{
   font-family:"Open Sans";
   font-weight:700;  
   font-size:24px;
   color: #151472;
}
      
.subtitulo{
   font-family:"Open Sans";
   font-weight:400;  
   font-size:14px;
   margin-left:20px;
   color: #151472;
}
      
.cabecalho-novo:after{
    content: '';
    display: inline-block; /* Adicionando essa linha, */
    width: 100%; /* essa também */
    height: 0; /* e essa foi a última */
}
    </style>
<div class="cabecalho">
<img class="cabecalho-conteudo" src="https://github.com/ampliasaude/ampliasaude.github.io/raw/main/AmpliaSaude-horizontal.png" height="53px">
</div>
    
<div class="cabecalho-novo" style="display:inline-block; width:100%; text-align:justify;">
    
 <div style="margin-bottom:16px; margin-top:16px; display:inline-block;">
   <span class="titulo">Trilhas Exploratórias<span>
   <span class="subtitulo">Saúde materna e neonatal e poluição ambiental por semana de concepção</span>
</div>
     
     <div style="justify-content:space-between; display:inline-block;">
     
     <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<title>Capturar imagem</title>
<path d="M20 10C20 15.5228 15.5228 20 10 20C4.47715 20 0 15.5228 0 10C0 4.47715 4.47715 0 10 0C15.5228 0 20 4.47715 20 10Z" fill="#151472"/>
<path d="M7 9L4 13H16.5L13.5 7L11.5 9.5L9.5 12L7 9Z" fill="white" stroke="white"/>
</svg>
     
<svg style="margin-right: 28px" width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<title>Obter dados</title>
<path d="M20 10C20 15.5228 15.5228 20 10 20C4.47715 20 0 15.5228 0 10C0 4.47715 4.47715 0 10 0C15.5228 0 20 4.47715 20 10Z" fill="#151472"/>
<path d="M9.64645 12.3536C9.84171 12.5488 10.1583 12.5488 10.3536 12.3536L13.5355 9.17157C13.7308 8.97631 13.7308 8.65973 13.5355 8.46447C13.3403 8.2692 13.0237 8.2692 12.8284 8.46447L10 11.2929L7.17157 8.46447C6.97631 8.2692 6.65973 8.2692 6.46447 8.46447C6.2692 8.65973 6.2692 8.97631 6.46447 9.17157L9.64645 12.3536ZM10.5 12L10.5 5L9.5 5L9.5 12L10.5 12Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M4 10V14C4 14.5523 4.44772 15 5 15H15C15.5523 15 16 14.5523 16 14V10H15V14H5L5 10H4Z" fill="white"/>
</svg>

${copyLinkButton()}

<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<title>Enviar via email</title>
<path d="M20 10C20 15.5228 15.5228 20 10 20C4.47715 20 0 15.5228 0 10C0 4.47715 4.47715 0 10 0C15.5228 0 20 4.47715 20 10Z" fill="#151472"/>
<path d="M16 7.125C16 6.50625 15.46 6 14.8 6H5.2C4.54 6 4 6.50625 4 7.125V13.875C4 14.4937 4.54 15 5.2 15H14.8C15.46 15 16 14.4937 16 13.875V7.125ZM14.8 7.125L10 9.9375L5.2 7.125H14.8ZM14.8 13.875H5.2V8.25L10 11.0625L14.8 8.25V13.875Z" fill="white"/>
</svg>

<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<title>Compartilhar no LinkedIn</title>
<path d="M20 10C20 15.5228 15.5228 20 10 20C4.47715 20 0 15.5228 0 10C0 4.47715 4.47715 0 10 0C15.5228 0 20 4.47715 20 10Z" fill="#151472"/>
<path d="M7.075 6.97826C7.075 7.51865 6.6125 7.95652 6.04167 7.95652C5.47083 7.95652 5.00833 7.51865 5.00833 6.97826C5.00833 6.43826 5.47083 6 6.04167 6C6.6125 6 7.075 6.43826 7.075 6.97826ZM7.08333 8.73913H5V15H7.08333V8.73913ZM10.4092 8.73913H8.33917V15H10.4096V11.7134C10.4096 9.88604 12.9217 9.73657 12.9217 11.7134V15H15V11.0357C15 7.95222 11.2825 8.06452 10.4092 9.58239V8.73913Z" fill="white"/>
</svg>
     
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<title>Compartilhar no Facebook</title>
<path d="M20 10C20 15.5228 15.5228 20 10 20C4.47715 20 0 15.5228 0 10C0 4.47715 4.47715 0 10 0C15.5228 0 20 4.47715 20 10Z" fill="#151472"/>
<path d="M8.25 8.33333H7V10H8.25V15H10.3333V10H11.8508L12 8.33333H10.3333V7.63875C10.3333 7.24083 10.4133 7.08333 10.7979 7.08333H12V5H10.4133C8.915 5 8.25 5.65958 8.25 6.92292V8.33333Z" fill="white"/>
</svg>

<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<title>Compartilhar no Twitter</title>
<path d="M20 10C20 15.5228 15.5228 20 10 20C4.47715 20 0 15.5228 0 10C0 4.47715 4.47715 0 10 0C15.5228 0 20 4.47715 20 10Z" fill="#151472"/>
<path d="M16 7.06547C15.5953 7.24636 15.1603 7.36818 14.7038 7.42309C15.17 7.14207 15.5279 6.69678 15.6961 6.16612C15.2603 6.42637 14.7772 6.61557 14.2629 6.71755C13.8518 6.27594 13.2647 6 12.6157 6C11.1586 6 10.088 7.36864 10.417 8.78943C8.542 8.69483 6.87917 7.7904 5.76588 6.41576C5.17463 7.43694 5.45925 8.77282 6.46392 9.44929C6.0945 9.43729 5.74617 9.33532 5.44229 9.16504C5.41754 10.2176 6.16692 11.2023 7.25225 11.4215C6.93463 11.5083 6.58675 11.5286 6.23292 11.4603C6.51983 12.3628 7.35308 13.0195 8.34125 13.0379C7.3925 13.7869 6.19717 14.1214 5 13.9793C5.99871 14.6239 7.18533 15 8.4595 15C12.6496 15 15.0169 11.4372 14.8739 8.24169C15.3148 7.92099 15.6975 7.52092 16 7.06547Z" fill="white"/>
</svg>
     </div>


 </div>
`
)}

function _mp(urlParamConf,ampliaMenu)
{
  if (urlParamConf)
    return new ampliaMenu.principal(urlParamConf.principalUrlids)
  else
    return new ampliaMenu.principal()
}


function _div_controles(html,barra_municipios,$0){return(
html`
<div style="display:flex; width:100%; align-items:center; justify-content:space-between;">
<div>${barra_municipios}</div><div>${$0}</div>
</div>
`
)}

function _vis(conf_trilhas,funcoesGeradoras,gAdicionaTrilha,Sortable,$0,updateTooltipPositon,d3)
{
  let div=document.createElement("div")
  for (let i=0;i<conf_trilhas.length;i++)
    div.append(funcoesGeradoras[conf_trilhas[i].variavel](conf_trilhas[i].i))
  //div.append(gLoadingTrilha())
  div.append(gAdicionaTrilha())
  Sortable.create(div,{animation:150,handle:".drag",filter:".undraggable",onUpdate:(e)=>{
    let element=conf_trilhas[e.oldIndex]
    let temp=conf_trilhas
    temp.splice(e.oldIndex,1)
    temp.splice(e.newIndex,0,element)
    $0.value=temp
  }})
  document.removeEventListener("scroll",updateTooltipPositon);
  document.addEventListener("scroll",updateTooltipPositon);
  d3.select(div).selectAll("g[aria-label=x-axis] g.tick text").each(function(){ 
    let sel = d3.select(this);
    let tx = sel.text();
    if(/[0-9]{4}/.test(tx)) {
      sel.style("font-size","14px").style("font-weight","700");
    }
  });
  return div
}


function _updateTooltipPositon(){return(
function updateTooltipPositon() {
    document.querySelectorAll(".tooltip").forEach(t=>setTimeout(t.updatePosition()));
}
)}

function _maxMunicipios(){return(
4
)}

function _intervalo(urlParamConf,slider_snap,defaultConf){return(
(urlParamConf)?slider_snap(104,468,urlParamConf.intervalo[0],urlParamConf.intervalo[1]):slider_snap(104,468,defaultConf.intervalo[0],defaultConf.intervalo[1])
)}

function _barra_municipios(html,sel_municipios,remove_mun_button,maxMunicipios,menu_municipios){return(
html`<!-- <label class="label-locais">LOCAIS </label> -->
${sel_municipios.map((d,i)=>remove_mun_button(d,i))}${sel_municipios.length<maxMunicipios?menu_municipios:""}`
)}

function _menu_municipios(d3,html,agregacoes,municipios,sel_municipios,maxMunicipios,$0,colors,conf_trilhas,funcoesFetch,mp,$1,funcoesProc,data){return(
d3.select(html`
<input list="menu-municipios-options" id="menu-municipios" value="Adicione um local" class="caixa-municipio" onfocus="this.value=''">
<datalist id="menu-municipios-options">
${agregacoes.map(d=>"<option value='"+d+"'>")}
${municipios.map(d=>d.municipio).sort(Intl.Collator().compare).map(d=>`<option value="${d}">`)}
</datalist>
`).on("change",e=>{
  if (!municipios.map(d=>d.municipio).includes(document.getElementById("menu-municipios").value)
      &&!agregacoes.includes(document.getElementById("menu-municipios").value))
    return
  let municipio=e.target.value;
  if (sel_municipios.length==maxMunicipios) return
  if (sel_municipios.map(d=>d.nome).includes(municipio)) return
  
  $0.value=$0.value.concat([{nome:municipio,cor:colors.find(d=>!sel_municipios.map(d=>d.cor).includes(d))}])
  
  //if (cache.map(d=>d.municipio).includes(municipio)){
  //  mutable data=data.concat(cache.filter(d=>d.municipio==municipio))
  //  return
  //}

  let c=[]
  for (let i of conf_trilhas){
    if (i.variavel=="PM25" && agregacoes.includes(municipio)) continue
    Promise.all([funcoesFetch[i.variavel](municipio,i.variavel!="PM25"?mp.value.expression:null)]).then(v=>{
      $1.value=$1.value.concat({idx:i.i,municipio:municipio,variavel:i.variavel,dados:funcoesProc[i.variavel](v[0])})
    })
  }

  for (let i of [...new Set(data.filter(d=>d.filtrado).map(d=>d.idx))])
    Promise.all([funcoesFetch[conf_trilhas.find(d=>d.i==i).variavel](municipio,conf_trilhas.find(d=>d.i==i).filtros.value.expression)]).then(v=>{
      $1.value=$1.value.concat({idx:i,municipio:municipio,variavel:data.find(d=>d.idx==i).variavel,filtrado:true,dados:funcoesProc[data.find(d=>d.idx==i).variavel](v[0])})
    })
}).node()
)}

function _listenerFiltroGlobal($0,$1,$2,funcoesFetch,funcoesProc){return(
(e) => {
  $0.value.filter(e=>e.variavel!="PM25").forEach(d=>{
  $1.value=$1.value.filter(d2=>d2.idx!=d.i||d2.filtrado)
  //if (!e.target.value.expression) continue
  $2.value.forEach(m=>{
    Promise.all([funcoesFetch[d.variavel](m.nome,e.target.value.expression)]).then(v=>{
      $1.value=$1.value.filter(d2=>d2.idx!=d.i||d2.filtrado||d2.municipio!=m.nome)
      $1.value=$1.value.concat({idx:d.i,municipio:m.nome,variavel:d.variavel,dados:funcoesProc[d.variavel](v[0])})
    })
  })
  })
}
)}

function _remove_mun_button(d3,sel_municipios,$0,$1,data,agregacoes,municipios){return(
(d,i)=>{
  let b=
d3.create("button").attr("class","btn-municipio")
  .style("background-color",d.cor)
  .style("display","inline-flex").style("align-items","flex-center") 
  .on("click",(e)=>{
    if (sel_municipios.length>1){
      $0.value=sel_municipios.filter(f=>f!=d)
      //mutable cache=cache.concat(data.filter(f=>f.municipio==d.nome&&!cache.includes(f)))
      $1.value=data.filter(f=>f.municipio!=d.nome)
    }
})
if (agregacoes.includes(d.nome))
  b.append("span").text(d.nome)
else
  b.append("span").text(d.nome+(d.nome.includes("(")?"":(" ("+municipios.find(e=>e.municipio==d.nome).sigla+")")))
b.append("span").attr("class","material-icons-outlined").style("font-size","16px").style("margin-left","5px").style("display",sel_municipios.length==1?"none":"inline").text("remove_circle_outline")
  return b.node()
}
)}

function _remove_trilha_button(d3,removeTrilha){return(
()=>d3.create("button").attr("class","btn-remove").text("–").on("click",removeTrilha).attr("title","Eliminar trilha").node()
)}

function _copy_button(d3,copyTrilha){return(
() =>
{
  let b=d3.create("button").attr("class","btn-remove").on("click",copyTrilha)
  b.append("span").attr("class","material-icons-outlined").style("font-size","10px").text("content_copy")
  b.attr("title","Duplicar trilha")
  return b.node()
}
)}

function _funcoesGeradoras(gPM25,gNEONATAL,gRELPARTO,gFETAL,gTOTAL){return(
{PM25:gPM25,NEONATAL:gNEONATAL,RELPARTO:gRELPARTO,FETAL:gFETAL,TOTAL:gTOTAL}
)}

function _funcoesProc(procPM25,procNeoNatal,procTOTAL,procFetal,procRelParto){return(
{PM25:procPM25,NEONATAL:procNeoNatal,TOTAL:procTOTAL,FETAL:procFetal,RELPARTO:procRelParto}
)}

function _funcoesFetch(fetchPM25,fetchNeoNatal,fetchTOTAL,fetchFetal,fetchRelParto){return(
{PM25:fetchPM25,NEONATAL:fetchNeoNatal,TOTAL:fetchTOTAL,FETAL:fetchFetal,RELPARTO:fetchRelParto}
)}

function _corTrilha(){return(
{
  PM25: "#F4947C",
  FETAL: "#DDD9FC",
  NEONATAL: "#FFD8FD",
  RELPARTO: "#FCEBD4",
  TOTAL: "#D9E7FC",  
}
)}

function _corTrilhaFraco(){return(
{
  PM25: "#FDEEEA",
  FETAL: "#EEECFD",
  NEONATAL: "#FFEAFE",
  RELPARTO: "#FFF7ED",
  TOTAL: "#ECF4FF",  
}
)}

function _style(html,height){return(
html`
<link href="https://fonts.googleapis.com/icon?family=Material+Icons+Outlined" rel="stylesheet">
<style>
@import url('https://fonts.googleapis.com/css2?family=Roboto+Condensed:wght@400;700&display=swap');
* {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;     
}
.btn-municipio{
  border-radius: 6px;
  border: none;
  font-family: 'Roboto Condensed';
  font-weight: 700;
  font-size: 14px;
  margin-right: 6px;
  padding: 3px;
  padding-left: 5px;
  padding-right: 5px;
  display: inline-flex;
  align-items: flex-center;
  height: 22px;
}
.label-locais{
  font-family: 'Roboto Condensed';
  font-size: 12px;
  margin-right: 12px;
}
.btn-adiciona, .btn-remove{
  border-radius: 50%;
  border: none;
  background-color: #151472;
  color: white;
  font-family: 'Roboto Condensed';
  font-size: 16px;
  
  display: inline-block;
  vertical-align: middle;
  width: 24px;
  height: 24px;
}
.trilha{
  border-left: 1px var(--cor-trilha) solid;
  display: inline-block;
  vertical-align: middle;
}

.sombra{
  box-shadow: 2px -2px 6px 0px rgb(0 0 0 / 25%);
  display:flex;
  align-items:center;
  justify-content:space-between;
  margin-bottom: 30px;
  border: 3px var(--cor-trilha) solid; 
  border-radius: 10px;
}

div.opcao-trilha {
  display: flex;
  gap: 4px;
  align-items: center;
}

span.titulo-trilha {
  font-weight: 700;
  margin-left: 5px;
  font-size: 12px;
}

span.fonte {
  text-align: right;
  flex-grow: 1;
  margin-right: 5px;
}

div.cabecalho-trilha {
  font-family: 'Roboto Condensed';
  display: flex;
  align-items: center;
  border-bottom: 1px solid var(--cor-trilha);
  line-height: 1.5;
  gap: 18px;
  font-size: 10px;
}

.lista-valores {
  font-family: 'Roboto Condensed';
  font-size: 12px;
  font-weight: 400;
  vertical-align: top;
  display: block;
  margin: 6px;
  text-align: center;
}

.interior-trilha{
  display: inline-block;
}
.fonte{
  font-weight: 400;
}
.valor{
  border-radius: 5px;
  display: block;
  text-align: center;
}
.conteudo-trilha{
  display: flex;
  justify-content: space-between;
}
.conteudo-trilha svg {
  border-radius: 0px 0px 20px 0px;
}
input{
  margin: 0px 0px 0px 0px;
  -webkit-appearance: none;
  appearance: none;
  margin: 0px;
  width: 12px;
  height: 12px;
  border: 1px #151472 solid;
  vertical-align: middle;
}
input:checked {
  background-color: #151472;  
}
input:focus {
  outline: 0;  
}
input[type=checkbox] {
  border-radius: 2px;
}  
input[type=radio] {
  border-radius: 50%;
} 

.titulo-lista-valores{
  font-family: 'Roboto Condensed';
  font-size: 11px;
  color: #141472;
}

.menuIG{
  margin-right: 10px;
  font-size: 12px;
}

.caixa-municipio{
  border: none;
  border-radius: 6px;
  background-color: white;
  border: dashed 2px #C4C4C4;
  font-family: "Roboto Condensed";
  padding: 3px;
  min-width: 150px;
  max-width: 240px;
  height: 20px;
}

button span {
  pointer-events: none;
}

.drag-container{
  display:inline-block;
  height: ${height+17}px;
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.nova-trilha {
  border: solid 3px #C4C4C4;
  border-radius: 10px 0 0 10px;
  border-right: none;
}

.drag{
  cursor: grab;
  height: 24px;
}

.buttons{
  margin-right: 5px;
  position: relative;
  top: -20px;
}

.icon-blue{
  color: #151472;
  user-select: none;
}

.icon-gray{
  color: #C4C4C4;
  user-select: none;
}

div.rodape-trilha {
  background-color: var(--cor-trilha);
  padding: 0px;
  border: 0px;
  margin: 0 0 0 -25px;
  min-height: 30px;
}

div.rodape-trilha div.menu-local {
  margin-top: -30px;
  min-height: 30px;
}

div.botao-comparacao {
  position: relative;
  width: 100px;
  height: 20px;
  font-family: 'Roboto Condensed';
  font-size: 12px;
  font-weight: 400;
  color: #484796;
  padding:5px;
  z-index: 5;
}

div.botao-comparacao label {
  line-height: 25px;
}

div.botao-comparacao input {
  margin-left: 2px;
  margin-right: 4px;
  margin-top: -2px;
  vertical-align: none;
}

div.tooltip {
  position:fixed;
  padding: 6px; 
  border-radius: 4px; 
  z-index:10; 
  border: 1px #15147266 solid;
  text-align: center;
  font-family: 'Roboto Condensed';
  font-size: 12px;
  font-weight: 700;
  color: #484796;
}

div.tooltip div.c2 {
  display: grid;
  column-gap: 6px;
  row-gap: 1px;
  grid-template-columns: 20px auto auto auto;  
}

div.tooltip div.c1 {
  display: grid;
  column-gap: 4px;
  row-gap: 1px;
  grid-template-columns: 20px auto auto;
}

div.tooltip div.periodo {
  grid-column-start: 1;
  text-align: left;
  font-weight: 400;
}

div.tooltip div.c1 div.periodo {
  grid-column-end: 4; 
}

div.tooltip div.c2 div.periodo {
  grid-column-end: 3;  
}

div.tooltip div.rodape {
  grid-column-start: 1;
  text-align: left;
  font-weight: 400;
  font-style: italic;
  padding-top: 10px;
}

div.tooltip div.c1 div.rodape {
  grid-column-end: 4; 
}

div.tooltip div.c2 div.rodape {
  grid-column-end: 5;  
}

div.tooltip div.legenda {
  text-align: center;
  margin-top: -2px;
}

div.tooltip div.municipio {
  text-align: left;
  max-width: 130px;
  overflow: hidden;    
  white-space: nowrap;
  text-overflow: ellipsis;
  cursor: default;
}

div.tooltip div.valor {
 text-align: center;
}

div.tooltip div.c2 svg {
  align-self: center;
  justify-self: center;
}

</style>
`
)}

function _legendTooltip(d3,valoresLista,corTrilhaFraco){return(
function legendTooltip(element, variavel, idx, escala="valor", tamanho=null) {

    function linhaLegenda(dashed) {
      let svgLinhaLegenda = document.createElementNS("http://www.w3.org/2000/svg","svg");
      let pathLinhaLegenda = document.createElementNS("http://www.w3.org/2000/svg", "path");
      svgLinhaLegenda.setAttribute("width","18");
      svgLinhaLegenda.setAttribute("height","8");
      svgLinhaLegenda.setAttribute("fill","none");
      pathLinhaLegenda.setAttribute("d","M1 7C1 5 1.39956 1 4.9956 1C10.2138 1 7.9923 7 11.9879 7C16.4829 7 15.9835 3 15.9835 1");
      pathLinhaLegenda.setAttribute("stroke","#151472");
      if(!dashed) {
        pathLinhaLegenda.setAttribute("stroke-width","2");
      } else {
        pathLinhaLegenda.setAttribute("stroke-width","1.5");
        pathLinhaLegenda.setAttribute("stroke-dasharray","2.5 1");
      }
      svgLinhaLegenda.appendChild(pathLinhaLegenda);
      return svgLinhaLegenda;
    }
  
    function camelCase(str) {
      const stop = ["de","da","do","dos","das","e"];
      if(str.length <= 2) {
        return str;
      }
      let suf = "";
      let pos = str.indexOf("(");
      if(pos >= 0) {
        suf = str.substring(pos);
        str = str.substring(0,pos);
      }
      let v = str.toLowerCase().split(" ");
      for(let i=0; i<v.length; i++ ) { 
        if(!stop.includes(v[i])) {
          v[i] = v[i][0].toUpperCase() + v[i].substring(1);
        }
      }
      return v.join(" ");
    }
  
    function showRelative(target, tooltip) {
      
      function registraMouseOver(divMunicipio, dadosMunicipio) {
        divMunicipio.addEventListener("mouseover",ev=>{
          d3.select(document.body)
            .selectAll("g[aria-label=line]") 
            .style("opacity",function(d){
              return d3.select(this).attr("stroke") == dadosMunicipio.cor ? 1.0 : 0.3;
            })
        });
        
        divMunicipio.addEventListener("mouseout",ev=>{
          d3.select(document.body)
            .selectAll("g[aria-label=line]") 
            .style("opacity",1.0)      
        });
      }

      tooltip.updatePosition = function() {
        let pos = target.getBoundingClientRect();
        let posBody = document.body.getBoundingClientRect();
        tooltip.style['top'] = `${pos.y}px`;
        if(pos.x > 250) {
          delete tooltip.style.left;
          tooltip.style.right = `${(posBody.width+posBody.x)-pos.x+20}px`;
        } else {
          delete tooltip.style.right
          tooltip.style.left = `${pos.x+10}px`;
        }
      }
      
      let dadosTooltip = valoresLista(idx,variavel,escala,tamanho);
      tooltip.updatePosition();
      let comparacao = dadosTooltip.valoresComparacao.length > 0;
      let divGridContainer = document.createElement("div");
      let divPeriodo = document.createElement("div");
      divPeriodo.classList.add("periodo");
      divPeriodo.textContent = dadosTooltip.semanaInicio + " - " + dadosTooltip.semanaFim;
      divGridContainer.appendChild(divPeriodo);
      if(comparacao) {
        divGridContainer.classList.add("c2");
        divGridContainer.appendChild(linhaLegenda(false));
        divGridContainer.appendChild(linhaLegenda(true));
      } else {
        divGridContainer.classList.add("c1");
      }
      for(let i=0; i<dadosTooltip.municipios.length; i++) {
        let divLegenda = document.createElement("div");
        let divMunicipio = document.createElement("div");
        let divPrincipal = document.createElement("div");
        let divComparacao = comparacao ? document.createElement("div") : null;
        divLegenda.classList.add("legenda");
        divLegenda.style.color = dadosTooltip.municipios[i].cor;
        divLegenda.textContent = "\u2B24";
        divMunicipio.classList.add("municipio");
        divMunicipio.textContent = camelCase(dadosTooltip.municipios[i].nome);
        registraMouseOver(divMunicipio, dadosTooltip.municipios[i]);
        divPrincipal.classList.add("valor");
        divPrincipal.textContent = dadosTooltip.valoresPrincipal[i];
        divGridContainer.appendChild(divLegenda);
        divGridContainer.appendChild(divMunicipio);
        divGridContainer.appendChild(divPrincipal);
        if(divComparacao) {
          divComparacao.classList.add("valor");
          divComparacao.textContent = dadosTooltip.valoresComparacao[i];
          divGridContainer.appendChild(divComparacao);
        }
      }
      let divUnidade = document.createElement("div");
      divUnidade.classList.add("rodape");
      divUnidade.innerHTML = `Unidade: <b>${dadosTooltip.unidade}</b><br>Média Semanal`;
      divGridContainer.appendChild(divUnidade);
      tooltip.replaceChildren(divGridContainer);
    }
    
    setTimeout(_=>{
      let tooltip = element.parentElement.querySelector(".tooltip");
      if(!tooltip) {
        tooltip = document.createElement("div");
        tooltip.setAttribute("class", "tooltip");
        tooltip.style.backgroundColor = corTrilhaFraco[variavel] + "CC";
        element.parentElement.appendChild(tooltip);
      }
      let rule = element.querySelector("g[aria-label=rule]");
      if(rule) {
        showRelative(rule, tooltip);
      }
   });
}
)}

function _valoresLista(sel_municipios,data,semanas_epidemiologicas,d3,sel,unidades,agregacoes,siglas,bisector){return(
function valoresLista(idx,variavel,escala,tamanho){
  
    function sortCriteria(a,b) {
      return sel_municipios.findIndex(d=>d.nome==b.municipio)-sel_municipios.findIndex(d=>d.nome==a.municipio);
    }
  
    function formatDate(dt) {
      dt = dt.toISOString().substring(0,10).split("-");
      return `${dt[2]}/${dt[1]}/${dt[0]}`;
    }
    
    function formataValor(v) {
      if(tamanho) {
        v = v[tamanho];
      }
      if(escala==="percentual"||escala==="taxa"){
        return v.toLocaleString("pt-BR",{maximumFractionDigits:2})
      }
      return v.toFixed(0);    
    }
    
    let resp = {};
    let idxData = data.filter(d=>d.idx==idx).sort(sortCriteria);
    let notFilteredData = idxData;
    let filteredData = idxData.filter(d=>d.filtrado);
    let semana = semanas_epidemiologicas[d3.bisector(d=>d.inicio.getTime()).center(semanas_epidemiologicas,sel)];
  
    resp.semanaInicio = formatDate(semana.inicio).substring(0,5);
    resp.semanaFim = formatDate(semana.termino);
    resp.unidade = unidades[variavel][escala];
    resp.valoresPrincipal = [];
    resp.valoresComparacao = [];
    resp.municipios = [];
    resp.ufSelecionada = sel_municipios.some(d=>agregacoes.includes(d.nome));
  
    if (filteredData.length > 0) { // Existe Filtro Ativado - Tabela são 2 colunas
      notFilteredData = idxData.filter(d=>!d.filtrado);
      if(variavel !== "PIG") {
        filteredData = filteredData.filter(d=>!Object.values(siglas).includes(d.municipio)||variavel!="PM25");
      }
      filteredData.forEach(d=>{
        let valor = d.dados[bisector.center(d.dados,sel)][escala];      resp.valoresComparacao.push(formataValor(variavel=="PIG"?valor[tamanho]:valor));
      });
    }    
    notFilteredData.forEach(d=>{
      let municipio = sel_municipios.find(e=>e.nome==d.municipio); 
      let valor = d.dados[bisector.center(d.dados,sel)][escala];
      resp.municipios.push(municipio);
      resp.valoresPrincipal.push(formataValor(variavel=="PIG"?valor[tamanho]:valor));
    });
  
    return resp;
}
)}

function _mouseDisplace(){return(
x=>70
)}

function _iconeContinuo(svg){return(
()=>svg`<svg width="32" height="12" viewBox="0 0 32 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M1 11C10.3064 0.853163 10.3064 -2.71343 16.4172 6.14199C22.5281 14.9974 25.1695 10.5011 31 1" stroke="#141472" stroke-width="2"/>
</svg>`
)}

function _iconeTracejado(svg){return(
()=>svg`<svg width="32" height="12" viewBox="0 0 32 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M1 11C10.3064 0.853163 10.3064 -2.71343 16.4172 6.14199C22.5281 14.9974 25.1695 10.5011 31 1" stroke="#141472" stroke-width="2" stroke-dasharray="3 3"/>
</svg>`
)}

function _iconeEspesso(svg){return(
()=>svg`<svg width="34" height="14" viewBox="0 0 34 14" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M2 12C11.3064 1.85316 11.3064 -1.71343 17.4172 7.14199C23.5281 15.9974 26.1695 11.5011 32 2" stroke="#141472" stroke-width="3"/>
</svg>`
)}

function _iconeFino(svg){return(
()=>svg`<svg width="32" height="12" viewBox="0 0 32 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M1 11C10.3064 0.853163 10.3064 -2.71343 16.4172 6.14199C22.5281 14.9974 25.1695 10.5011 31 1" stroke="#141472"/>
</svg>`
)}

function _gPM25(Plot,width,height,formatTime,conf_trilhas,semanas_epidemiologicas,intervalo,maxScale,indicador,padroes,data,siglas,filterDate,janela,lineWidth,sel_municipios,bisector,sel,legendTooltip,$0,mouseDisplace,d3,html,corTrilha,removeTrilha,copy_button,checkMediaMovel,checkTempo,inner_slider){return(
(idx) =>
{
  let g=
    Plot.plot({
      marginTop:5,
      marginRight:0,
      width:width-65,
      height:height,
      x: {
        grid: true,
        label: null,
        format: formatTime,
        domain: conf_trilhas.find(d=>d.i==idx).alterar_tempo?
          conf_trilhas.find(d=>d.i==idx).alterar_tempo.map(d=>semanas_epidemiologicas[d].inicio)
          :intervalo.map(d=>semanas_epidemiologicas[d].inicio)
      },
      y: {
        grid: true,
        domain: [0,maxScale[indicador]],
        transform: d=>Math.min(122,d),
        label: null
      },
      marks: [
        Plot.rect([{y1:padroes[indicador][3],y2:maxScale[indicador]}],{y1:"y1",y2:"y2",fill:"#FFEBEB"}),
        Plot.rect([{y1:padroes[indicador][2],y2:padroes[indicador][3]}],{y1:"y1",y2:"y2",fill:"#FFF5EB"}),
        Plot.rect([{y1:padroes[indicador][1],y2:padroes[indicador][2]}],{y1:"y1",y2:"y2",fill:"#FFFFED"}),
        conf_trilhas.find(d=>d.i==idx).mostra_media_movel?
        data.filter(d=>d.idx==idx&&!Object.values(siglas).includes(d.municipio)).map((d,i)=>Plot.line(d.dados.filter(d=>filterDate(d,idx)), Plot.windowY({strict:true, k:janela, anchor:"middle", x:"x", y:"valor", curve:"monotone-x", strokeWidth:lineWidth, stroke:sel_municipios.find(e=>e.nome==d.municipio).cor})))
        :data.filter(d=>d.idx==idx&&!Object.values(siglas).includes(d.municipio)).map((d,i)=>Plot.line(d.dados.filter(d=>filterDate(d,idx)), {x: "x", y: "valor", curve:"monotone-x", strokeWidth:lineWidth, stroke:sel_municipios.find(e=>e.nome==d.municipio).cor})),
        Plot.ruleX([data.filter(d=>d.idx==idx)[0].dados[bisector.center(data.filter(d=>d.idx==idx)[0].dados,sel)]],{x:"x",strokeDasharray:"5"}),
        !conf_trilhas.find(d=>d.i==idx).mostra_media_movel?data.filter(d=>d.idx==idx).map((d,i)=>Plot.dot([d.dados[bisector.center(d.dados,sel)]],{x:"x",y:"valor",fill:sel_municipios.find(e=>e.nome==d.municipio).cor})):null
        //data.filter(d=>d.variavel=="PM25").map((d,i)=>Plot.text([d.dados[bisector.center(d.dados,sel)]],{x:"x",y:0,text:"valor",dx:"15",dy:-5-10*i,stroke:sel_municipios.find(e=>e.nome==d.municipio).cor,strokeWidth:0.5}))
      ]
    })

  legendTooltip(g,'PM25',idx);

  g.onmousedown=(e)=>{$0.value=Math.min(Math.max(g.scale("x").invert(e.x-mouseDisplace(e.x)),g.scale("x").domain[0]),g.scale("x").domain[1])}
  d3.select(g).call(d3.drag().on("drag",(e)=>$0.value=Math.min(Math.max(g.scale("x").invert(e.x-mouseDisplace(e.x)),g.scale("x").domain[0]),g.scale("x").domain[1])))
  
  return html`
<div style="--cor-trilha:${corTrilha["PM25"]}; display:inline-flex; align-items:center; justify-content:space-between;">
<div class="buttons">
  ${d3.create("button").attr("class","btn-remove").text("–").on("click",removeTrilha).node()}<br>
  ${copy_button()}
</div>
<div class="sombra">
<div class="drag-container">
<span class="material-icons-outlined ${conf_trilhas[0].i==idx?"icon-gray":"icon-blue"}">
expand_less
</span>
<div class="drag">
  <span class="material-icons-outlined icon-blue">
  drag_indicator
  </span>
</div>
<span class="material-icons-outlined ${conf_trilhas[conf_trilhas.length-1].i==idx?"icon-gray":"icon-blue"}">
expand_more
</span>
</div>
<div class="trilha" i=${idx}>
  <div class="cabecalho-trilha">
    <span class="titulo-trilha">POLUENTE</span>
    <div class="opcao-trilha">
    <label class="label-cabecalho-trilha">MÉDIA MÓVEL</label> ${d3.create("input").attr("type","checkbox").property("checked",conf_trilhas.find(d=>d.i==idx).mostra_media_movel).on("change",e=>checkMediaMovel(e,idx)).node()}
  </div>
  <div class="opcao-trilha">
    <label class="label-cabecalho-trilha">MODIFICAR PERÍODO</label> ${d3.create("input").attr("type","checkbox").property("checked",conf_trilhas.find(d=>d.i==idx).alterar_tempo).on("change",e=>checkTempo(e,idx)).node()}
  </div>
  <span class="fonte">Fonte: SISAM</span>
  </div>
<div class="conteudo-trilha">
<div class="interior-trilha" style="text-align:right;">${g}</div>
</div>
${inner_slider(idx)}
</div>
</div>
</div>`
}
)}

function _gFETAL(sel_municipios,data,gLoadingTrilha,conf_trilhas,mp,Plot,width,height,semanas_epidemiologicas,intervalo,filterDate,janela,lineWidthFiltered,lineWidth,bisector,sel,legendTooltip,$0,d3,mouseDisplace,html,corTrilha,removeTrilha,copy_button,checkMediaMovel,checkTempo,checkEscala,inner_slider,checkFiltros){return(
(idx) =>
{
  if(!sel_municipios.map(d=>d.nome).every(d=>data.filter(e=>e.idx==idx).map(e=>e.municipio).includes(d)))
    return gLoadingTrilha()

  if((conf_trilhas.find(d=>d.i==idx).filtros.value.expression&&conf_trilhas.find(d=>d.i==idx).show_filtros)&&data.filter(d=>d.idx==idx).every(d=>d.filtrado===undefined)||(mp.value.expression&&data.filter(d=>d.idx==idx).every(d=>d.filtrado!==undefined)))
    return gLoadingTrilha()

  let escala=conf_trilhas.find(d=>d.i==idx).escala
  
  let g=
    Plot.plot({
    marginTop:5,
    marginRight:0,
    width:width-65,
    height:height,
    x: {
      grid: true,
      label: null,
      domain: conf_trilhas.find(d=>d.i==idx).alterar_tempo?
        conf_trilhas.find(d=>d.i==idx).alterar_tempo.map(d=>semanas_epidemiologicas[d].inicio)
        :intervalo.map(d=>semanas_epidemiologicas[d].inicio)
    },
    y: {
      grid: true,
      label: null
    },
    marks: [
      conf_trilhas.find(d=>d.i==idx).mostra_media_movel?
      data.filter(d=>d.idx==idx).map((d,i)=>Plot.line(d.dados.filter(d=>filterDate(d,idx)),Plot.windowY({
        strict:true,
        k:janela,
        anchor:"middle",
        x:"x",y:d=>d[escala],
        strokeWidth:d.filtrado?lineWidthFiltered:lineWidth,
        stroke:sel_municipios.find(e=>e.nome==d.municipio).cor,
        strokeDasharray:d.filtrado?"3":"1"
      })))
      :data.filter(d=>d.idx==idx).map((d,i)=>Plot.line(d.dados.filter(d=>filterDate(d,idx)), {
        sort: "x",
        x: "x",
        y: d=>d[escala],
        curve:"monotone-x",
        strokeWidth:d.filtrado?lineWidthFiltered:lineWidth,
        stroke:sel_municipios.find(e=>e.nome==d.municipio).cor,
        strokeDasharray:d.filtrado?"3":"1"
      })),
      Plot.ruleX([data.filter(d=>d.idx==idx)[0].dados[bisector.center(data.filter(d=>d.idx==idx)[0].dados,sel)]],{x:"x",strokeDasharray:"5"}),
      !conf_trilhas.find(d=>d.i==idx).mostra_media_movel?data.filter(d=>d.idx==idx).map((d,i)=>Plot.dot([d.dados[bisector.center(d.dados,sel)]],{x:"x",y:d=>d[escala],fill:sel_municipios.find(e=>e.nome==d.municipio).cor})):null
    ]
  })

  legendTooltip(g,'FETAL',idx,escala);
  g.onmousedown=(e)=>{$0.value=Math.min(Math.max(g.scale("x").invert(e.offsetX),g.scale("x").domain[0]),g.scale("x").domain[1])}
  d3.select(g).call(d3.drag().on("drag",(e)=>$0.value=Math.min(Math.max(g.scale("x").invert(e.x-mouseDisplace(e.x)),g.scale("x").domain[0]),g.scale("x").domain[1])))
  
  return html`
<div style="--cor-trilha:${corTrilha["FETAL"]}; display:inline-flex; align-items:center; justify-content:space-between;">
<div class="buttons">
  ${d3.create("button").attr("class","btn-remove").text("–").on("click",removeTrilha).node()}<br>
  ${copy_button()}
</div>
<div class="sombra">
<div class="drag-container">
<span class="material-icons-outlined ${conf_trilhas[0].i==idx?"icon-gray":"icon-blue"}">
expand_less
</span>
<div class="drag">
  <span class="material-icons-outlined icon-blue">
  drag_indicator
  </span>
</div>
<span class="material-icons-outlined ${conf_trilhas[conf_trilhas.length-1].i==idx?"icon-gray":"icon-blue"}">
expand_more
</span>
</div>
<div class="trilha" i=${idx}>
  <div class="cabecalho-trilha">
    <span class="titulo-trilha">ÓBITOS FETAIS</span>
    <div class="opcao-trilha">
    <label class="label-cabecalho-trilha">MÉDIA MÓVEL</label> ${d3.create("input").attr("type","checkbox").property("checked",conf_trilhas.find(d=>d.i==idx).mostra_media_movel).on("change",e=>checkMediaMovel(e,idx)).node()}
    </div>
    <div class="opcao-trilha">
    <label class="label-cabecalho-trilha">MODIFICAR PERÍODO</label> ${d3.create("input").attr("type","checkbox").property("checked",conf_trilhas.find(d=>d.i==idx).alterar_tempo).on("change",e=>checkTempo(e,idx)).node()}
    </div>
    <div class="opcao-trilha">
    <label class="label-cabecalho-trilha">ESCALA ABSOLUTO</label>
    ${d3.create("input")
      .attr("type","radio")
      .attr("name","escala_"+idx)
      .property("checked",conf_trilhas.find(d=>d.i==idx).escala=="absoluto")
      .attr("value","absoluto")
      .on("change",e=>checkEscala(e,idx))
      .node()}
    </div>
    <div class="opcao-trilha">
    <label class="label-cabecalho-trilha"> PERCENTUAL</label>
    ${d3.create("input")
      .attr("type","radio")
      .attr("name","escala_"+idx)
      .property("checked",conf_trilhas.find(d=>d.i==idx).escala=="percentual")
      .attr("value","percentual")
      .on("change",e=>checkEscala(e,idx))
      .node()}
      </div>
    <span class="fonte">Fonte: SIM<span>
  </div>
<div class="conteudo-trilha">
<div class="interior-trilha" style="text-align:right;">${g}</div>
</div>
${inner_slider(idx)}
<div class="rodape-trilha">
<div class="botao-comparacao">
${d3.create("input").attr("type","checkbox").property("checked",conf_trilhas.find(d=>d.i==idx).show_filtros).on("change",e=>checkFiltros(e,idx)).node()}
<label>COMPARAÇÃO</label>
</div>
<div class="menu-local">${conf_trilhas.find(d=>d.i==idx).show_filtros?conf_trilhas.find(d=>d.i==idx).filtros:""}</div>
</div>
</div>
</div>
</div>`
}
)}

function _gNEONATAL(sel_municipios,data,gLoadingTrilha,conf_trilhas,mp,Plot,width,height,semanas_epidemiologicas,intervalo,filterDate,janela,lineWidthFiltered,lineWidth,bisector,sel,legendTooltip,$0,d3,mouseDisplace,html,corTrilha,removeTrilha,copy_button,checkNeoNatal,checkMediaMovel,checkTempo,checkEscala,inner_slider,checkFiltros){return(
(idx) => {
  if(!sel_municipios.map(d=>d.nome).every(d=>data.filter(e=>e.idx==idx).map(e=>e.municipio).includes(d)))
    return gLoadingTrilha()

  if((conf_trilhas.find(d=>d.i==idx).filtros.value.expression&&conf_trilhas.find(d=>d.i==idx).show_filtros)&&data.filter(d=>d.idx==idx).every(d=>d.filtrado===undefined)||(mp.value.expression&&data.filter(d=>d.idx==idx).every(d=>d.filtrado!==undefined)))
    return gLoadingTrilha()
  
  let escala=conf_trilhas.find(d=>d.i==idx).escala
  let neonatal=conf_trilhas.find(d=>d.i==idx).neonatal
  let g=
    Plot.plot({
    marginTop:5,
    marginRight:0,
    width:width-65,
    height:height,
    x: {
      grid: true,
      label: null,
      domain: conf_trilhas.find(d=>d.i==idx).alterar_tempo?
        conf_trilhas.find(d=>d.i==idx).alterar_tempo.map(d=>semanas_epidemiologicas[d].inicio)
        :intervalo.map(d=>semanas_epidemiologicas[d].inicio)
    },
    y: {
      grid: true,
      label: null
    },
      marks: [
        conf_trilhas.find(d=>d.i==idx).mostra_media_movel?
data.filter(d=>d.idx==idx).map((d,i)=>Plot.line(d.dados.filter(d=>filterDate(d,idx)),Plot.windowY({
  strict:true,
  k:janela,
  anchor:"middle",
  x:"x",
  y:d=>d[escala][neonatal],
  strokeWidth:d.filtrado?lineWidthFiltered:lineWidth,
  stroke:sel_municipios.find(e=>e.nome==d.municipio).cor,
  strokeDasharray:d.filtrado?"3":"1"
})))
      :data.filter(d=>d.idx==idx).map((d,i)=>Plot.line(d.dados.filter(d=>filterDate(d,idx)), {
        sort: "x",
        x: "x",
        y: d=>d[escala][neonatal],
        curve:"monotone-x",
        strokeWidth:d.filtrado?lineWidthFiltered:lineWidth,
        stroke:sel_municipios.find(e=>e.nome==d.municipio).cor,
        strokeDasharray:d.filtrado?"3":"1"
      })),
        Plot.ruleX([data.filter(d=>d.idx==idx)[0].dados[bisector.center(data.filter(d=>d.idx==idx)[0].dados,sel)]],{x:"x",strokeDasharray:"5"}),
        !conf_trilhas.find(d=>d.i==idx).mostra_media_movel?data.filter(d=>d.idx==idx).map((d,i)=>Plot.dot([d.dados[bisector.center(d.dados,sel)]],{x:"x",y:d=>d[escala][neonatal],fill:sel_municipios.find(e=>e.nome==d.municipio).cor})):null
      ]
    })
  legendTooltip(g,'NEONATAL',idx,escala,neonatal);

  g.onmousedown=(e)=>{$0.value=Math.min(Math.max(g.scale("x").invert(e.offsetX),g.scale("x").domain[0]),g.scale("x").domain[1])}
  d3.select(g).call(d3.drag().on("drag",(e)=>$0.value=Math.min(Math.max(g.scale("x").invert(e.x-mouseDisplace(e.x)),g.scale("x").domain[0]),g.scale("x").domain[1])))

    return html`
<div style="--cor-trilha: ${corTrilha["NEONATAL"]}; display:inline-flex; align-items:center; justify-content:space-between;">
<div class="buttons">
  ${d3.create("button").attr("class","btn-remove").text("–").on("click",removeTrilha).node()}<br>
  ${copy_button()}
</div>
<div class="sombra">
<div class="drag-container">
<span class="material-icons-outlined ${conf_trilhas[0].i==idx?"icon-gray":"icon-blue"}">
expand_less
</span>
<div class="drag">
  <span class="material-icons-outlined icon-blue">
  drag_indicator
  </span>
</div>
<span class="material-icons-outlined ${conf_trilhas[conf_trilhas.length-1].i==idx?"icon-gray":"icon-blue"}">
expand_more
</span>
</div>
<div class="trilha" i=${idx}>
  <div class="cabecalho-trilha">
    <span class="titulo-trilha">ÓBITOS NEONATAIS</span>

    ${(()=>{let s=d3.create("select").attr("class","menuIG");
            s.style("font-family","Roboto Condensed");
            s.append("option").attr("name","PRECOCE").text("PRECOCE").property("selected",conf_trilhas.find(d=>d.i==idx).neonatal=="PRECOCE");
            s.append("option").attr("name","TARDIO").text("TARDIO").property("selected",conf_trilhas.find(d=>d.i==idx).neonatal=="TARDIO");
            
s.append("option").attr("name","NEOTOTAL").attr("value","NEOTOTAL").text("PRECOCE+TARDIO").property("selected",conf_trilhas.find(d=>d.i==idx).neonatal=="NEOTOTAL");
            
            s.append("option").attr("name","POS").text("POS").property("selected",conf_trilhas.find(d=>d.i==idx).neonatal=="POS");
            s.on("change",e=>checkNeoNatal(e,idx));
            return s.node();}
      )()}

    <div class="opcao-trilha">
    <label class="label-cabecalho-trilha">MÉDIA MÓVEL</label> ${d3.create("input")
          .attr("type","checkbox")
          .property("checked",conf_trilhas.find(d=>d.i==idx)
          .mostra_media_movel)
          .on("change",e=>checkMediaMovel(e,idx)).node()}
    </div>
    <div class="opcao-trilha">
    <label class="label-cabecalho-trilha">MODIFICAR PERÍODO</label> ${d3.create("input").attr("type","checkbox").property("checked",conf_trilhas.find(d=>d.i==idx).alterar_tempo).on("change",e=>checkTempo(e,idx)).node()}
    </div>
    <div class="opcao-trilha">
    
    <label class="label-cabecalho-trilha">ESCALA ABSOLUTO</label>
    ${d3.create("input")
      .attr("type","radio")
      .attr("name","escala_"+idx)
      .property("checked",conf_trilhas.find(d=>d.i==idx).escala=="absoluto")
      .attr("value","absoluto")
      .on("change",e=>checkEscala(e,idx))
      .node()}
    </div>
    <div class="opcao-trilha">
    <label class="label-cabecalho-trilha"> PERCENTUAL</label>
    ${d3.create("input")
      .attr("type","radio")
      .attr("name","escala_"+idx)
      .property("checked",conf_trilhas.find(d=>d.i==idx).escala=="percentual")
      .attr("value","percentual")
      .on("change",e=>checkEscala(e,idx))
      .node()}
    </div>
    <div class="opcao-trilha">
    <label class="label-cabecalho-trilha"> TAXA POR 1000</label>
    ${d3.create("input")
      .attr("type","radio")
      .attr("name","escala_"+idx)
      .property("checked",conf_trilhas.find(d=>d.i==idx).escala=="taxa")
      .attr("value","taxa")
      .on("change",e=>checkEscala(e,idx))
      .node()}
    </div>
    <span class="fonte">Fonte: SIM</span>
  </div>

<div class="conteudo-trilha">
<div class="interior-trilha" style="text-align:right;">${g}</div>
</div>
${inner_slider(idx)}
<div class="rodape-trilha">
<div class="botao-comparacao">
${d3.create("input").attr("type","checkbox").property("checked",conf_trilhas.find(d=>d.i==idx).show_filtros).on("change",e=>checkFiltros(e,idx)).node()}
<label>COMPARAÇÃO</label>
</div>
<div class="menu-local">${conf_trilhas.find(d=>d.i==idx).show_filtros?conf_trilhas.find(d=>d.i==idx).filtros:""}</div>
</div>
</div>
</div>
</div>`
}
)}

function _gRELPARTO(sel_municipios,data,gLoadingTrilha,conf_trilhas,mp,Plot,width,height,semanas_epidemiologicas,intervalo,filterDate,janela,lineWidthFiltered,lineWidth,bisector,sel,legendTooltip,$0,d3,mouseDisplace,html,corTrilha,removeTrilha,copy_button,checkRelParto,checkMediaMovel,checkTempo,checkEscala,inner_slider,checkFiltros){return(
(idx) => {
  if(!sel_municipios.map(d=>d.nome).every(d=>data.filter(e=>e.idx==idx).map(e=>e.municipio).includes(d)))
    return gLoadingTrilha()
  if((conf_trilhas.find(d=>d.i==idx).filtros.value.expression&&conf_trilhas.find(d=>d.i==idx).show_filtros)&&data.filter(d=>d.idx==idx).every(d=>d.filtrado===undefined)||(mp.value.expression&&data.filter(d=>d.idx==idx).every(d=>d.filtrado!==undefined)))
    return gLoadingTrilha()
  
  let escala=conf_trilhas.find(d=>d.i==idx).escala
  let relparto=conf_trilhas.find(d=>d.i==idx).relparto
  let g=
    Plot.plot({
    marginTop:5,
    marginRight:0,
    width:width-65,
    height:height,
    x: {
      grid: true,
      label: null,
      domain: conf_trilhas.find(d=>d.i==idx).alterar_tempo?
        conf_trilhas.find(d=>d.i==idx).alterar_tempo.map(d=>semanas_epidemiologicas[d].inicio)
        :intervalo.map(d=>semanas_epidemiologicas[d].inicio)
    },
    y: {
      grid: true,
      label: null
    },
      marks: [
        conf_trilhas.find(d=>d.i==idx).mostra_media_movel?
data.filter(d=>d.idx==idx).map((d,i)=>Plot.line(d.dados.filter(d=>filterDate(d,idx)),Plot.windowY({
  strict:true,
  k:janela,
  anchor:"middle",
  x:"x",
  y:d=>d[escala][relparto],
  strokeWidth:d.filtrado?lineWidthFiltered:lineWidth,
  stroke:sel_municipios.find(e=>e.nome==d.municipio).cor,
  strokeDasharray:d.filtrado?"3":"1"
})))
      :data.filter(d=>d.idx==idx).map((d,i)=>Plot.line(d.dados.filter(d=>filterDate(d,idx)), {
        sort: "x",
        x: "x",
        y: d=>d[escala][relparto],
        curve:"monotone-x",
        strokeWidth:d.filtrado?lineWidthFiltered:lineWidth,
        stroke:sel_municipios.find(e=>e.nome==d.municipio).cor,
        strokeDasharray:d.filtrado?"3":"1"
      })),
        Plot.ruleX([data.filter(d=>d.idx==idx)[0].dados[bisector.center(data.filter(d=>d.idx==idx)[0].dados,sel)]],{x:"x",strokeDasharray:"5"}),
        !conf_trilhas.find(d=>d.i==idx).mostra_media_movel?data.filter(d=>d.idx==idx).map((d,i)=>Plot.dot([d.dados[bisector.center(d.dados,sel)]],{x:"x",y:d=>d[escala][relparto],fill:sel_municipios.find(e=>e.nome==d.municipio).cor})):null
      ]
    })

  legendTooltip(g,'RELPARTO',idx,escala,relparto);

  
  g.onmousedown=(e)=>{$0.value=Math.min(Math.max(g.scale("x").invert(e.offsetX),g.scale("x").domain[0]),g.scale("x").domain[1])}
  d3.select(g).call(d3.drag().on("drag",(e)=>$0.value=Math.min(Math.max(g.scale("x").invert(e.x-mouseDisplace(e.x)),g.scale("x").domain[0]),g.scale("x").domain[1])))

    return html`
<div style="--cor-trilha: ${corTrilha["RELPARTO"]}; display:inline-flex; align-items:center; justify-content:space-between;">
<div class="buttons">
  ${d3.create("button").attr("class","btn-remove").text("–").on("click",removeTrilha).node()}<br>
  ${copy_button()}
</div>
<div class="sombra">
<div class="drag-container">
<span class="material-icons-outlined ${conf_trilhas[0].i==idx?"icon-gray":"icon-blue"}">
expand_less
</span>
<div class="drag">
  <span class="material-icons-outlined icon-blue">
  drag_indicator
  </span>
</div>
<span class="material-icons-outlined ${conf_trilhas[conf_trilhas.length-1].i==idx?"icon-gray":"icon-blue"}">
expand_more
</span>
</div>
<div class="trilha" i=${idx}>
  <div class="cabecalho-trilha">
    <span class="titulo-trilha">ÓBITOS EM RELAÇÃO AO PARTO</span>

    ${(()=>{let s=d3.create("select").attr("class","menuIG");
            s.style("font-family","Roboto Condensed");
            s.append("option").attr("name","ANTES").text("ANTES").property("selected",conf_trilhas.find(d=>d.i==idx).relparto=="ANTES");
            s.append("option").attr("name","DURANTE").text("DURANTE").property("selected",conf_trilhas.find(d=>d.i==idx).relparto=="DURANTE");
            s.append("option").attr("name","DEPOIS").text("DEPOIS").property("selected",conf_trilhas.find(d=>d.i==idx).relparto=="DEPOIS");
            s.on("change",e=>checkRelParto(e,idx));
            return s.node();}
      )()}

    <div class="opcao-trilha">
    <label class="label-cabecalho-trilha">MÉDIA MÓVEL</label> ${d3.create("input")
          .attr("type","checkbox")
          .property("checked",conf_trilhas.find(d=>d.i==idx)
          .mostra_media_movel)
          .on("change",e=>checkMediaMovel(e,idx)).node()}
    </div>
    <div class="opcao-trilha">
    <label class="label-cabecalho-trilha">MODIFICAR PERÍODO</label> ${d3.create("input").attr("type","checkbox").property("checked",conf_trilhas.find(d=>d.i==idx).alterar_tempo).on("change",e=>checkTempo(e,idx)).node()}
    </div>
    <div class="opcao-trilha">
    <label class="label-cabecalho-trilha">ESCALA ABSOLUTO</label>
    ${d3.create("input")
      .attr("type","radio")
      .attr("name","escala_"+idx)
      .property("checked",conf_trilhas.find(d=>d.i==idx).escala=="absoluto")
      .attr("value","absoluto")
      .on("change",e=>checkEscala(e,idx))
      .node()}
    </div>
    <div class="opcao-trilha">
    <label class="label-cabecalho-trilha"> PERCENTUAL</label>
    ${d3.create("input")
      .attr("type","radio")
      .attr("name","escala_"+idx)
      .property("checked",conf_trilhas.find(d=>d.i==idx).escala=="percentual")
      .attr("value","percentual")
      .on("change",e=>checkEscala(e,idx))
      .node()}
    </div>
    <div class="opcao-trilha">
    <label class="label-cabecalho-trilha"> TAXA POR 1000</label>
    ${d3.create("input")
      .attr("type","radio")
      .attr("name","escala_"+idx)
      .property("checked",conf_trilhas.find(d=>d.i==idx).escala=="taxa")
      .attr("value","taxa")
      .on("change",e=>checkEscala(e,idx))
      .node()}
    </div>
    <span class="fonte">Fonte: SIM</span>
  </div>

<div class="conteudo-trilha">
<div class="interior-trilha" style="text-align:right;">${g}</div>
</div>
${inner_slider(idx)}
<div class="rodape-trilha">
<div class="botao-comparacao">
${d3.create("input").attr("type","checkbox").property("checked",conf_trilhas.find(d=>d.i==idx).show_filtros).on("change",e=>checkFiltros(e,idx)).node()}
<label>COMPARAÇÃO</label>
</div>
<div class="menu-local">${conf_trilhas.find(d=>d.i==idx).show_filtros?conf_trilhas.find(d=>d.i==idx).filtros:""}</div>
</div>
</div>
</div>
</div>`
}
)}

function _gTOTAL(sel_municipios,data,gLoadingTrilha,conf_trilhas,mp,Plot,width,height,semanas_epidemiologicas,intervalo,filterDate,janela,lineWidthFiltered,lineWidth,bisector,sel,legendTooltip,$0,d3,mouseDisplace,html,corTrilha,removeTrilha,copy_button,checkMediaMovel,checkTempo,checkEscala,inner_slider,checkFiltros){return(
(idx) =>
{
  if(!sel_municipios.map(d=>d.nome).every(d=>data.filter(e=>e.idx==idx).map(e=>e.municipio).includes(d)))
    return gLoadingTrilha()

  if((conf_trilhas.find(d=>d.i==idx).filtros.value.expression&&conf_trilhas.find(d=>d.i==idx).show_filtros)&&data.filter(d=>d.idx==idx).every(d=>d.filtrado===undefined)||(mp.value.expression&&data.filter(d=>d.idx==idx).every(d=>d.filtrado!==undefined)))
    return gLoadingTrilha()

  let escala=conf_trilhas.find(d=>d.i==idx).escala
  
  let g=
    Plot.plot({
    marginTop:5,
    marginRight:0,
    width:width-65,
    height:height,
    x: {
      grid: true,
      label: null,
      domain: conf_trilhas.find(d=>d.i==idx).alterar_tempo?
        conf_trilhas.find(d=>d.i==idx).alterar_tempo.map(d=>semanas_epidemiologicas[d].inicio)
        :intervalo.map(d=>semanas_epidemiologicas[d].inicio)
    },
    y: {
      grid: true,
      label: null
    },
    marks: [
      conf_trilhas.find(d=>d.i==idx).mostra_media_movel?
      data.filter(d=>d.idx==idx).map((d,i)=>Plot.line(d.dados.filter(d=>filterDate(d,idx)),Plot.windowY({
        strict:true,
        k:janela,
        anchor:"middle",
        x:"x",y:d=>d[escala],
        strokeWidth:d.filtrado?lineWidthFiltered:lineWidth,
        stroke:sel_municipios.find(e=>e.nome==d.municipio).cor,
        strokeDasharray:d.filtrado?"3":"1"
      })))
      :data.filter(d=>d.idx==idx).map((d,i)=>Plot.line(d.dados.filter(d=>filterDate(d,idx)), {
        sort: "x",
        x: "x",
        y: d=>d[escala],
        curve:"monotone-x",
        strokeWidth:d.filtrado?lineWidthFiltered:lineWidth,
        stroke:sel_municipios.find(e=>e.nome==d.municipio).cor,
        strokeDasharray:d.filtrado?"3":"1"
      })),
      Plot.ruleX([data.filter(d=>d.idx==idx)[0].dados[bisector.center(data.filter(d=>d.idx==idx)[0].dados,sel)]],{x:"x",strokeDasharray:"5"}),
      !conf_trilhas.find(d=>d.i==idx).mostra_media_movel?data.filter(d=>d.idx==idx).map((d,i)=>Plot.dot([d.dados[bisector.center(d.dados,sel)]],{x:"x",y:d=>d[escala],fill:sel_municipios.find(e=>e.nome==d.municipio).cor})):null
    ]
  })
  
  legendTooltip(g,'TOTAL',idx,escala);

  g.onmousedown=(e)=>{$0.value=Math.min(Math.max(g.scale("x").invert(e.offsetX),g.scale("x").domain[0]),g.scale("x").domain[1])}
  d3.select(g).call(d3.drag().on("drag",(e)=>$0.value=Math.min(Math.max(g.scale("x").invert(e.x-mouseDisplace(e.x)),g.scale("x").domain[0]),g.scale("x").domain[1])))
  
  return html`
<div style="--cor-trilha: ${corTrilha["TOTAL"]}; display:inline-flex; align-items:center; justify-content:space-between;">
<div class="buttons">
  ${d3.create("button").attr("class","btn-remove").text("–").on("click",removeTrilha).node()}<br>
  ${copy_button()}
</div>
<div class="sombra">
<div class="drag-container">
<span class="material-icons-outlined ${conf_trilhas[0].i==idx?"icon-gray":"icon-blue"}">
expand_less
</span>
<div class="drag">
  <span class="material-icons-outlined icon-blue">
  drag_indicator
  </span>
</div>
<span class="material-icons-outlined ${conf_trilhas[conf_trilhas.length-1].i==idx?"icon-gray":"icon-blue"}">
expand_more
</span>
</div>
<div class="trilha" i=${idx}>
  <div class="cabecalho-trilha">
    <span class="titulo-trilha">ÓBITOS TOTAIS</span>
    <div class="opcao-trilha">
    <label class="label-cabecalho-trilha">MÉDIA MÓVEL</label> ${d3.create("input").attr("type","checkbox").property("checked",conf_trilhas.find(d=>d.i==idx).mostra_media_movel).on("change",e=>checkMediaMovel(e,idx)).node()}
    </div>
    <div class="opcao-trilha">
    <label class="label-cabecalho-trilha">MODIFICAR PERÍODO</label> ${d3.create("input").attr("type","checkbox").property("checked",conf_trilhas.find(d=>d.i==idx).alterar_tempo).on("change",e=>checkTempo(e,idx)).node()}
    </div>
    <div class="opcao-trilha">
    <label class="label-cabecalho-trilha">ESCALA ABSOLUTO</label>
    ${d3.create("input")
      .attr("type","radio")
      .attr("name","escala_"+idx)
      .property("checked",conf_trilhas.find(d=>d.i==idx).escala=="absoluto")
      .attr("value","absoluto")
      .on("change",e=>checkEscala(e,idx))
      .node()}
    </div>
    <div class="opcao-trilha">
    <label class="label-cabecalho-trilha"> PERCENTUAL</label>
    ${d3.create("input")
      .attr("type","radio")
      .attr("name","escala_"+idx)
      .property("checked",conf_trilhas.find(d=>d.i==idx).escala=="percentual")
      .attr("value","percentual")
      .on("change",e=>checkEscala(e,idx))
      .node()}
    </div>
    <span class="fonte">Fonte: SIM</span>
  </div>
<div class="conteudo-trilha">
<div class="interior-trilha" style="text-align:right;">${g}</div>
</div>
${inner_slider(idx)}
<div class="rodape-trilha">
<div class="botao-comparacao">
${d3.create("input").attr("type","checkbox").property("checked",conf_trilhas.find(d=>d.i==idx).show_filtros).on("change",e=>checkFiltros(e,idx)).node()}
<label>COMPARAÇÃO</label>
</div>
<div class="menu-local">${conf_trilhas.find(d=>d.i==idx).show_filtros?conf_trilhas.find(d=>d.i==idx).filtros:""}</div>
</div>
</div>
</div>
</div>`
}
)}

function _gListaValores(conf_trilhas,data,html,semanas_epidemiologicas,d3,sel,iconeEspesso,siglas,sel_municipios,bisector,iconeFino,unidades,agregacoes){return(
function gListaValores(idx,escala="valor",tamanho=null){
  let variavel=conf_trilhas.find(d=>d.i==idx).variavel
  if (data.filter(d=>d.idx==idx).map(d=>d.filtrado).some(e=>e))
    return html`<div class="lista-valores interior-trilha" style="display:flex;flex-direction:column;justify-content:space-between;">
<div style="width:180px">
  <span class="titulo-lista-valores">
  ${String(semanas_epidemiologicas[d3.bisector(d=>d.inicio.getTime()).center(semanas_epidemiologicas,sel)].inicio.getDate()).padStart(2,"0")+"/"+String(1+semanas_epidemiologicas[d3.bisector(d=>d.inicio.getTime()).center(semanas_epidemiologicas,sel)].inicio.getMonth()).padStart(2,"0")} – ${semanas_epidemiologicas[d3.bisector(d=>d.inicio.getTime()).center(semanas_epidemiologicas,sel)].termino.toLocaleDateString("pt-BR")}
  </span>

<div style="margin-top:5px;">
<div style="display:inline-block; color:#151472;">

${iconeEspesso()}

${((variavel!="NEONATAL"&&variavel!="RELPARTO")?
   data.filter(d=>!d.filtrado&&d.idx==idx&&(!Object.values(siglas).includes(d.municipio)||variavel!="PM25")).sort((a,b)=>sel_municipios.findIndex(d=>d.nome==b.municipio)-sel_municipios.findIndex(d=>d.nome==a.municipio)):
   data.filter(d=>!d.filtrado&&d.idx==idx).sort((a,b)=>sel_municipios.findIndex(d=>d.nome==b.municipio)-sel_municipios.findIndex(d=>d.nome==a.municipio)))
.map(d=>"<span class='valor' style='color:"+sel_municipios.find(e=>e.nome==d.municipio).cor+";'>" +((variavel!="NEONATAL"&&variavel!="RELPARTO")?d.dados[bisector.center(d.dados,sel)][escala].toFixed(escala=="percentual"||escala=="taxa"?3:0):d.dados[bisector.center(d.dados,sel)][escala][tamanho].toLocaleString("pt-BR",{maximumFractionDigits:escala=="percentual"?3:escala=="taxa"?2:0}))+"</span>")}
</div>

<div style="display:inline-block; margin-left: 15px; color:#151472;">

${iconeFino()}

${((variavel!="NEONATAL"&&variavel!="RELPARTO")?
   data.filter(d=>d.filtrado&&d.idx==idx&&(!Object.values(siglas).includes(d.municipio)||variavel!="PM25")).sort((a,b)=>sel_municipios.findIndex(d=>d.nome==b.municipio)-sel_municipios.findIndex(d=>d.nome==a.municipio)):
   data.filter(d=>d.filtrado&&d.idx==idx).sort((a,b)=>sel_municipios.findIndex(d=>d.nome==b.municipio)-sel_municipios.findIndex(d=>d.nome==a.municipio)))
.map(d=>"<span class='valor' style='color:"+sel_municipios.find(e=>e.nome==d.municipio).cor+";'>" +((variavel!="NEONATAL"&&variavel!="RELPARTO")?d.dados[bisector.center(d.dados,sel)][escala].toFixed(escala=="percentual"||escala=="taxa"?3:0):d.dados[bisector.center(d.dados,sel)][escala][tamanho].toLocaleString("pt-BR",{maximumFractionDigits:escala=="percentual"?3:escala=="taxa"?2:0}))+"</span>")}
</div>

<div style="display:inline-block; margin-left: 15px; color:#151472; font-size:11px;">
${unidades[variavel][escala]}
</div>
</div>

</div>
<div>
<center><span class="fonte">Fonte: ${variavel=="PM25"?"SISAM":"SIM"}<span></center>
</div>
</div>`

  else
return html`<div class="lista-valores interior-trilha" style="display:flex;flex-direction:column;justify-content:space-between;">
<div style="width:180px">
  <span class="titulo-lista-valores">
  ${String(semanas_epidemiologicas[d3.bisector(d=>d.inicio.getTime()).center(semanas_epidemiologicas,sel)].inicio.getDate()).padStart(2,"0")+"/"+String(1+semanas_epidemiologicas[d3.bisector(d=>d.inicio.getTime()).center(semanas_epidemiologicas,sel)].inicio.getMonth()).padStart(2,"0")} – ${semanas_epidemiologicas[d3.bisector(d=>d.inicio.getTime()).center(semanas_epidemiologicas,sel)].termino.toLocaleDateString("pt-BR")}
  </span>
${((variavel!="NEONATAL"&&variavel!="RELPARTO")?
   data.filter(d=>d.idx==idx&&(!Object.values(siglas).includes(d.municipio)||variavel!="PM25")).sort((a,b)=>b.dados[bisector.center(b.dados,sel)][escala]-a.dados[bisector.center(a.dados,sel)][escala]):
   data.filter(d=>d.idx==idx).sort((a,b)=>b.dados[bisector.center(b.dados,sel)][escala][tamanho]-a.dados[bisector.center(a.dados,sel)][escala][tamanho]))
.map(d=>"<span class='valor' style='color:"+sel_municipios.find(e=>e.nome==d.municipio).cor+";'>" +((variavel!="NEONATAL"&&variavel!="RELPARTO")?d.dados[bisector.center(d.dados,sel)][escala].toFixed(escala=="percentual"||escala=="taxa"?3:0):d.dados[bisector.center(d.dados,sel)][escala][tamanho].toLocaleString("pt-BR",{maximumFractionDigits:escala=="percentual"?3:escala=="taxa"?2:0}))+" "+unidades[variavel][escala]+"</span>")}
</div>
<div>
<center>
${sel_municipios.some(d=>agregacoes.includes(d.nome))?"Dados de UFs não disponíveis":""}
<span class="fonte">Fonte: ${variavel=="PM25"?"SISAM":"SIM"}<span>
</center>
</div>
</div>`
}
)}

function _gAdicionaTrilha(html,d3,removeTrilha,copyTrilha,width,addTrilha){return(
(d) => {
    return html`
<div style="display:flex; align-items:center; justify-content:space-between;">
<div style="visibility:hidden;">
  ${d3.create("button").attr("class","btn-remove").text("–").on("click",removeTrilha).node()}<br>
  ${d3.create("button").attr("class","btn-remove").text("C").on("click",copyTrilha).node()}
</div>

<div class="drag-container nova-trilha" style="border:dotted #C4C4C4 2px; border-right:none; height:80px;">
<span class="material-icons-outlined icon-gray">
expand_less
</span>
<div class="drag" style="cursor:auto;">
  <span class="material-icons-outlined icon-gray">
  drag_indicator
  </span>
</div>
<span class="material-icons-outlined icon-gray">
expand_more
</span>
</div>

<div class="trilha" style="width:${width-60}px; margin-left:0px; border-radius: 0 10px 10px 0; border:dotted #C4C4C4 2px; box-shadow:none; height:80px;">
  <div class="cabecalho-trilha" style="border-bottom:dotted #C4C4C4 2px;">
${(()=>{let s=d3.create("select").attr("class","menuIG");
            s.style("margin-left","10px")
              .style("font-family","Roboto Condensed")
            s.append("option").attr("name","").text("ADICIONE UMA TRILHA")
              .property("disabled",true).property("selected",true);
            s.append("option").attr("name","PM25").text("POLUENTE");
            s.append("option").attr("name","ÓBITOS FETAIS").text("ÓBITOS FETAIS")
            s.append("option").attr("name","ÓBITOS NEONATAIS TOTAIS").text("ÓBITOS NEONATAIS TOTAIS")
            s.append("option").attr("name","ÓBITOS EM RELAÇÃO AO PARTO").text("ÓBITOS EM RELAÇÃO AO PARTO")
            s.append("option").attr("name","TOTAL").text("ÓBITOS TOTAIS")
            s.on("change",addTrilha);
            return s.node();})()}
  </div>

<div class="conteudo-trilha">
<br><br>
</div>
</div>`
}
)}

function _gLoadingTrilha(html,d3,removeTrilha,copyTrilha,width){return(
(d) => {
    return html`
<div style="--cor-trilha: #c4c4c4; display:flex; align-items:center; justify-content:space-between; margin-bottom:30px;">
<div style="visibility:hidden;">
  ${d3.create("button").attr("class","btn-remove").text("–").on("click",removeTrilha).node()}<br>
  ${d3.create("button").attr("class","btn-remove").text("C").on("click",copyTrilha).node()}
</div>
<div class="sombra" style="border: 3px var(--cor-trilha) solid; border-radius: 10px;">
<div class="drag-container" style="height:80px;">
<span class="material-icons-outlined icon-gray">
expand_less
</span>
<div class="drag">
  <span class="material-icons-outlined icon-gray">
  drag_indicator
  </span>
</div>
<span class="material-icons-outlined icon-gray">
expand_more
</span>
</div>
<div class="trilha" style="width:${width-60}px; margin-left:0px; margin-bottom:0px; height: 80px;">
  <div class="cabecalho-trilha">
  <label class="label-titulo-trilha">CARREGANDO...</label>
  </div>

<div class="conteudo-trilha">
<br><br>
</div>
</div>
</div>`
}
)}

function _copyTrilha(conf_trilhas,d3,listenerFiltro,$0,data,$1){return(
(e) => {
  let temp=conf_trilhas, idx=conf_trilhas.findIndex(d=>d.i==e.target.parentNode.parentNode.getElementsByClassName("trilha")[0].getAttribute("i")), copy={...conf_trilhas[idx]}, idx2=d3.max(conf_trilhas.map(d=>d.i))+1
  copy.i=idx2
  if (copy.variavel!="PM25") {
    copy.filtros=copy.filtros.cloneMenu()
    copy.filtros.addEventListener("input",e=>listenerFiltro(e,copy))
  }
  temp.splice(idx+1,0,copy)
  $0.value=temp
  let copy_data=JSON.parse(JSON.stringify(data.filter(d=>d.idx==e.target.parentNode.parentNode.getElementsByClassName("trilha")[0].getAttribute("i"))))
  copy_data.forEach((d,i,a)=>{a[i].idx=idx2;a[i].dados.forEach((d2,i2,a2)=>a2[i2].x=new Date(a2[i2].x))})
  $1.value=data.concat(copy_data)
}
)}

function _removeTrilha($0,conf_trilhas,$1,data){return(
(e)=>{
  $0.value=conf_trilhas.filter(d=>d.i!=e.target.parentNode.parentNode.getElementsByClassName("trilha")[0].getAttribute("i"))
  $1.value=data.filter(d=>d.idx!=e.target.parentNode.parentNode.getElementsByClassName("trilha")[0].getAttribute("i"))
}
)}

function _addTrilha(d3,conf_trilhas,$0,sel_municipios,fetchPM25,$1,procPM25,ampliaMenu,corTrilha,listenerFiltro,fetchNeoNatal,procNeoNatal,fetchRelParto,procRelParto,fetchFetal,procFetal,fetchTOTAL,procTOTAL){return(
(e)=>{
  let lastIdx=d3.max(conf_trilhas.map(d=>d.i))||0, conf=null
  switch(e.target.value){
    case "POLUENTE":
      conf={i:lastIdx+1, mostra_media_movel:true, variavel:"PM25", alterar_tempo:null, poluente:"PM25"}
      $0.value=conf_trilhas.concat(conf)
      sel_municipios.forEach(m=>
  Promise.all([fetchPM25(m.nome)]).then(v=>{
    $1.value=$1.value.concat([{idx:lastIdx+1,municipio:m.nome,variavel:"PM25",dados:procPM25(v[0])}])
  }))        
      break
            
    case ("ÓBITOS NEONATAIS TOTAIS"):
      conf={i:lastIdx+1, mostra_media_movel:false, escala:"taxa", neonatal:"PRECOCE", variavel:"NEONATAL", alterar_tempo:null, filtros:new ampliaMenu.local(null,null,corTrilha["NEONATAL"]), show_filtros:false}
      conf.filtros.addEventListener("input",e=>listenerFiltro(e,conf))
      $0.value=conf_trilhas.concat(conf)
      sel_municipios.forEach(m=>Promise.all([fetchNeoNatal(m.nome,conf.filtros.expression)]).then(v=>{
    $1.value=$1.value.concat([{idx:lastIdx+1,municipio:m.nome,variavel:"NEONATAL",dados:procNeoNatal(v[0])}])
          }))
      break

    case ("ÓBITOS EM RELAÇÃO AO PARTO"):
      conf={i:lastIdx+1, mostra_media_movel:false, escala:"taxa", relparto:"ANTES", variavel:"RELPARTO", alterar_tempo:null, filtros:new ampliaMenu.local(null,null,corTrilha["RELPARTO"]), show_filtros:false}
      conf.filtros.addEventListener("input",e=>listenerFiltro(e,conf))
      $0.value=conf_trilhas.concat(conf)
      sel_municipios.forEach(m=>Promise.all([fetchRelParto(m.nome,conf.filtros.expression)]).then(v=>{
    $1.value=$1.value.concat([{idx:lastIdx+1,municipio:m.nome,variavel:"RELPARTO",dados:procRelParto(v[0])}])
          }))
      break

    case ("ÓBITOS FETAIS"):
      conf={i:lastIdx+1, mostra_media_movel:false, variavel:"FETAL", alterar_tempo:null, filtros:new ampliaMenu.local(null,null,corTrilha["FETAIS"]), show_filtros:false, escala:"absoluto"}
      conf.filtros.addEventListener("input",e=>listenerFiltro(e,conf))
      $0.value=conf_trilhas.concat(conf)
        sel_municipios.forEach(m=>Promise.all([fetchFetal(m.nome,conf.filtros.expression)]).then(v=>{
    $1.value=$1.value.concat([{idx:lastIdx+1,municipio:m.nome,variavel:"FETAL",dados:procFetal(v[0])}])
  }))
      break


      
    case ("ÓBITOS TOTAIS"):
      conf={i:lastIdx+1, mostra_media_movel:false, variavel:"TOTAL", alterar_tempo:null, filtros:new ampliaMenu.local(null,null,corTrilha["TOTAL"]), show_filtros:false, escala:"absoluto"}
      conf.filtros.addEventListener("input",e=>listenerFiltro(e,conf))
      $0.value=conf_trilhas.concat(conf)
        sel_municipios.forEach(m=>Promise.all([fetchTOTAL(m.nome,conf.filtros.expression)]).then(v=>{
    $1.value=$1.value.concat([{idx:lastIdx+1,municipio:m.nome,variavel:"TOTAL",dados:procTOTAL(v[0])}])
  }))
      break
      
  }
}
)}

function _inner_slider(conf_trilhas,slider_snap,width,$0){return(
(i)=>{
  if (!conf_trilhas.find(d=>d.i==i).alterar_tempo)
  return ""
  let slider=slider_snap(104,468,conf_trilhas.find(d=>d.i==i).alterar_tempo[0],conf_trilhas.find(d=>d.i==i).alterar_tempo[1],width-90,40)
  slider.addEventListener("input",(e)=>{
    let temp=conf_trilhas
    temp.find(d=>d.i==i).alterar_tempo=slider.value
    //mutable sel=Math.min(Math.max(sel,semanas_epidemiologicas[slider.value[0]].inicio),semanas_epidemiologicas[slider.value[1]].termino)
    $0.value=temp
  })
  return slider
}
)}

function _checkPoluente(conf_trilhas,$0){return(
(e)=>{
  let temp=conf_trilhas
  conf_trilhas.find(d=>d.i==e.target.parentElement.parentElement.getAttribute("i")).poluente=e.target.value
  $0.value=temp
}
)}

function _checkFiltros(conf_trilhas,$0,ampliaMenu,mp,corTrilha,listenerFiltro,$1,funcoesFetch,funcoesProc,$2){return(
(e,idx)=>{
  let temp=conf_trilhas;
  conf_trilhas.find(d=>d.i==idx).show_filtros=e.target.checked;
  if (!e.target.checked){
      $0.value=$0.value.filter(d2=>d2.idx!=idx||!d2.filtrado)
  } else {
      let cfg = conf_trilhas.find(d=>d.i==idx);
      cfg.filtros = new ampliaMenu.local(null,mp.value.urlids,corTrilha[cfg.variavel]);
      cfg.filtros.addEventListener("input",e=>listenerFiltro(e,cfg))
      $0.value=$0.value.filter(d2=>d2.idx!=idx||!d2.filtrado)
      $1.value.forEach(m=>{
        Promise.all([funcoesFetch[conf_trilhas.find(d=>d.i==idx).variavel](m.nome,conf_trilhas.find(d=>d.i==idx).filtros.value.expression)]).then(v=>{
          $0.value=$0.value.concat({idx,municipio:m.nome,variavel:conf_trilhas.find(d=>d.i==idx).variavel,filtrado:true,dados:funcoesProc[conf_trilhas.find(d=>d.i==idx).variavel](v[0])})
        })
      })
  }
  $2.value=temp
}
)}

function _checkTempo(conf_trilhas,intervalo,$0){return(
(e,idx) => {
  let temp=conf_trilhas
  if (e.target.checked)
    conf_trilhas.find(d=>d.i==idx).alterar_tempo=intervalo
  else
    conf_trilhas.find(d=>d.i==idx).alterar_tempo=null
  $0.value=temp
}
)}

function _checkNeoNatal(conf_trilhas,$0){return(
(e,idx)=>{
  let temp=conf_trilhas
  conf_trilhas.find(d=>d.i==idx).neonatal=e.target.value
  $0.value=temp
}
)}

function _checkRelParto(conf_trilhas,$0){return(
(e,idx)=>{
  let temp=conf_trilhas
  conf_trilhas.find(d=>d.i==idx).relparto=e.target.value
  $0.value=temp
}
)}

function _checkEscala(conf_trilhas,$0){return(
(e,idx)=>{
  let temp=conf_trilhas
  conf_trilhas.find(d=>d.i==idx).escala=e.target.value
  $0.value=temp
}
)}

function _checkMediaMovel(conf_trilhas,$0){return(
(e,idx)=>{
  let temp=conf_trilhas
  conf_trilhas.find(d=>d.i==idx).mostra_media_movel=e.target.checked
  $0.value=temp
}
)}

function _converteIntervalo(semanas_epidemiologicas){return(
(d) => {
  let ret=[0,0]
  ret[0]=semanas_epidemiologicas[d[0]].inicio
  ret[1]=semanas_epidemiologicas[d[1]].termino
  return ret
}
)}

function _conf_principal(){return(
""
)}

function _conf_trilhas(urlParamConf,ampliaMenu,corTrilha)
{
  if (urlParamConf) {
    return urlParamConf.trilhas.map((t) => {
      t.filtros = new ampliaMenu.local(null, t.filtrosUrlids);
      return t;
    });
  } else
    return [
      {
        i: 0,
        mostra_media_movel: true,
        variavel: "PM25",
        alterar_tempo: null,
        poluente: "PM25"
      },
      {
        i: 2,
        mostra_media_movel: false,
        escala: "absoluto",
        variavel: "FETAL",
        alterar_tempo: null,
        filtros: new ampliaMenu.local(null,null,corTrilha["FETAL"]),
        show_filtros: false
      },
      {
        i: 3,
        mostra_media_movel: false,
        escala: "absoluto",
        neonatal: "PRECOCE",
        variavel: "NEONATAL",
        alterar_tempo: null,
        filtros: new ampliaMenu.local(null,null,corTrilha["NEONATAL"]),
        show_filtros: false
      },
      {
        i: 4,
        mostra_media_movel: false,
        escala: "absoluto",
        relparto: "ANTES",
        variavel: "RELPARTO",
        alterar_tempo: null,
        filtros: new ampliaMenu.local(null,null,corTrilha["RELPARTO"]),
        show_filtros: false
      },
    ];
}


function _unidades(){return(
{PM25:{valor:"µg/m³"},NEONATAL:{absoluto:"óbitos",percentual:"%",taxa:"nasc./1000NV"},RELPARTO:{absoluto:"óbitos",percentual:"%",taxa:"nasc./1000NV"},TOTAL:{absoluto:"óbitos",percentual:"%"},FETAL:{absoluto:"óbitos",percentual:"%"}}
)}

function _lineWidth(){return(
2.5
)}

function _lineWidthFiltered(){return(
2
)}

function _firstload(){return(
true
)}

function _municipiosDefault(urlParamConf,defaultConf){return(
urlParamConf
  ? urlParamConf.municipios
  : defaultConf.municipios
)}

function _onfirstload(firstload,$0,$1,conf_trilhas,funcoesFetch,mp,$2,funcoesProc,listenerFiltro,listenerFiltroGlobal,sessionStorage,getCurrentConf,$3,$4)
{
  if (firstload) {
    for (let municipio of $0.value) {
      $1.value = $1.value.concat([
        municipio
      ]);

      municipio=municipio.nome
      
      conf_trilhas.forEach(t=>{
        Promise.all([funcoesFetch[t.variavel](municipio,mp.value.expression)]).then(v=>{
          $2.value = $2.value.concat({
            idx: t.i,
            municipio: municipio,
            variavel: t.variavel,
            dados: funcoesProc[t.variavel](v[0])
          })
        })
        if (t.show_filtros)
          Promise.all([funcoesFetch[t.variavel](municipio,t.filtros.value.expression)]).then(v=>{
            $2.value = $2.value.concat({
              idx: t.i,
              municipio: municipio,
              variavel: t.variavel,
              filtrado: true,
              dados: funcoesProc[t.variavel](v[0])
            })
          })
      })

      conf_trilhas
        .slice(1)
        .forEach((d) =>
          d.filtros.addEventListener("input", (e) => listenerFiltro(e, d))
        );
    }

    mp.addEventListener("input",e=>listenerFiltroGlobal(e))
    mp.addEventListener("aba",e=>{
      sessionStorage.setItem("conf3",JSON.stringify(getCurrentConf()))
      sessionStorage.setItem("municipios",JSON.stringify($1.value))
      sessionStorage.setItem("intervalo",JSON.stringify($3.value))
    })
    $4.value = false;
  }
}


function _listenerFiltro($0,$1,funcoesFetch,funcoesProc){return(
(e,d) => {
  $0.value=$0.value.filter(d2=>d2.idx!=d.i||!d2.filtrado)
  //if (!d.filtros.value.expression) return
  $1.value.forEach(m=>{
    Promise.all([funcoesFetch[d.variavel](m.nome,d.filtros.value.expression)]).then(v=>{
      $0.value=$0.value.concat({idx:d.i,municipio:m.nome,variavel:d.variavel,filtrado:true,dados:funcoesProc[d.variavel](v[0])})
    })
  })
}
)}

function _janela(Inputs){return(
Inputs.range([3, 53], {label: "Janela em semanas", value: 13, step: 2})
)}

function _indicador(Inputs){return(
Inputs.select(["co_ppb","no2_ppb","o3_ppb","pm25_ugm3","so2_ugm3"], {label: "Indicador",value: "pm25_ugm3"})
)}

function _colors(){return(
["#2F87F5","#D8C56C","#DC5988","#6CC28D","#67AEC2","#ABA6F8","#D8C56C","#2DE8BD","#2F87F5","#94E8F9"]
)}

function _sel_variaveis(){return(
[]
)}

function _sel_municipios(){return(
[]
)}

function _sel(semanas_epidemiologicas,d3,urlParamConf,defaultConf){return(
semanas_epidemiologicas[Math.ceil(d3.interpolate(...urlParamConf?urlParamConf.intervalo:defaultConf.intervalo)(0.5))].inicio
)}

function _bisector(d3){return(
d3.bisector(d=>d.x)
)}

function _formatTime(d3){return(
d3.timeFormatDefaultLocale({
  "decimal": ",",
  "thousands": ".",
  "grouping": [3],
  "currency": ["$", ""],
  "dateTime": "%a %b %e %X %Y",
  "date": "%d/%m/%Y",
  "time": "%H:%M:%S",
  "periods": ["AM", "PM"],
  "days": ["Domingo", "Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "Sábado"],
  "shortDays": ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab"],
  "months": ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
  "shortMonths": ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"]
})
)}

function _computaMediaMovel(janela){return(
function computaMediaMovel(data)
{
  let ret=[]
  data.forEach((d,i)=>{
    if (i<~~(janela/2)||i>data.length-~~(janela/2)-1){
      return
    }
    let soma=0
    for (let s=-~~(janela/2);s<=~~(janela/2);s++)
      soma+=data[i-s].TOTAL
    ret.push({x:d.x,TOTAL:soma/janela})
  })
  return ret
}
)}

function _periodoInicio(intervalo){return(
intervalo[0]
)}

function _periodoFim(intervalo){return(
intervalo[1]
)}

function _filterDate(conf_trilhas,janela,semanas_epidemiologicas,periodoInicio,periodoFim){return(
(d,i)=>{
  let conf=conf_trilhas.find(f=>f.i==i).alterar_tempo, delta=conf_trilhas.find(f=>f.i==i).mostra_media_movel?(janela-1)/2:0
  if(conf)
    return d.x.getTime()>=semanas_epidemiologicas[conf[0]-delta].inicio.getTime()&&d.x.getTime()<=semanas_epidemiologicas[conf[1]+delta].termino.getTime()
  else
    return d.x.getTime()>=semanas_epidemiologicas[periodoInicio-delta].inicio.getTime()&&d.x.getTime()<=semanas_epidemiologicas[periodoFim+delta].termino.getTime()
}
)}

function _height(){return(
200
)}

function _loading(){return(
true
)}

function _sqlSisam($0,municipios,SQLiteDatabaseClient){return(
function sqlSisam(municipio,qry){
  if (municipio.length==2) return
  $0.value = true;
  let codMunicipio = municipios.find(d=>d.municipio==municipio).codigo_sdv;
  let codUf = codMunicipio.substring(0,2);
  let url = `https://storage.googleapis.com/amplia/sisam/${codUf}/mun${codMunicipio}.db`;
  let resp = SQLiteDatabaseClient.open(url)
    .then(c => c.query(qry))
  ;
  $0.value = false;
  return resp;
}
)}

function _style2(html){return(
html`<style>
  @import url('https://fonts.googleapis.com/css2?family=Fira+Sans+Condensed:wght@400;700&display=swap');
  text{
    font-family:"Fira Sans Condensed"
  }
</style>`
)}

function _municipios(FileAttachment){return(
FileAttachment("municipios2.csv").csv()
)}

function _semanas_epidemiologicas(FileAttachment){return(
FileAttachment("semanas_epidemiologicas_estendido.csv").csv().then(d=>d.map(s=>{
  s.inicio=new Date(Date.UTC(+s.inicio.substr(0,4),+s.inicio.substr(5,2)-1,+s.inicio.substr(8,2)));
  s.termino=new Date(Date.UTC(+s.termino.substr(0,4),+s.termino.substr(5,2)-1,+s.termino.substr(8,2)));
  return s;
}).filter(d=>d.ano>=2010))
)}

function _capitais(){return(
{"ACRE":"RIO BRANCO", "ALAGOAS":"MACEIÓ", "AMAPÁ":"MACAPÁ", "AMAZONAS":"MANAUS", "BAHIA":"SALVADOR", "CEARÁ":"FORTALEZA", "DISTRITO FEDERAL":"BRASÍLIA", "ESPÍRITO SANTO":"VITÓRIA", "GOIÁS":"GOIÂNIA", "MARANHÃO":"SÃO LUÍS", "MATO GROSSO":"CUIABÁ", "MATO GROSSO DO SUL":"CAMPO GRANDE", "MINAS GERAIS":"BELO HORIZONTE", "PARÁ":"BELÉM", "PARAÍBA":"JOÃO PESSOA", "PARANÁ":"CURITIBA", "PERNAMBUCO":"RECIFE", "PIAUÍ":"TERESINA", "RIO DE JANEIRO":"RIO DE JANEIRO", "RIO GRANDE DO NORTE":"NATAL", "RIO GRANDE DO SUL":"PORTO ALEGRE", "RONDÔNIA":"PORTO VELHO", "RORAIMA":"BOA VISTA", "SANTA CATARINA":"FLORIANÓPOLIS", "SÃO PAULO":"SÃO PAULO", "SERGIPE":"ARACAJU", "TOCANTINS":"PALMAS"}
)}

function _siglas(){return(
{"ACRE":"AC", "ALAGOAS":"AL", "AMAPÁ":"AP", "AMAZONAS":"AM", "BAHIA":"BA", "CEARÁ":"CE", "DISTRITO FEDERAL":"DF", "ESPÍRITO SANTO":"ES", "GOIÁS":"GO", "MARANHÃO":"MA", "MATO GROSSO":"MT", "MATO GROSSO DO SUL":"MS", "MINAS GERAIS":"MG", "PARÁ":"PA", "PARAÍBA":"PB", "PARANÁ":"PR", "PERNAMBUCO":"PE", "PIAUÍ":"PI", "RIO DE JANEIRO":"RJ", "RIO GRANDE DO NORTE":"RN", "RIO GRANDE DO SUL":"RS", "RONDÔNIA":"RO", "RORAIMA":"RR", "SANTA CATARINA":"SC", "SÃO PAULO":"SP", "SERGIPE":"SE", "TOCANTINS":"TO"}
)}

function _data(){return(
[]
)}

function _cache(){return(
[]
)}

function _months(){return(
["JAN","FEV","MAR","ABR","MAI","JUN","JUL","AGO","SET","OUT","NOV","DEZ"]
)}

function _agregacoes(siglas){return(
Object.values(siglas).sort(Intl.Collator().compare)
)}

function _queryLocalSISAM(agregacoes,siglas,municipios){return(
(municipio) => {
  if (municipio=="BRASIL")
    return ""
  if (agregacoes.includes(municipio))
    return "mun_uf_nome='"+Object.entries(siglas).find(d=>d[1]==municipio)[0]+"'"
  return "mun_geocodsdv="+municipios.find(d=>d.municipio==municipio).codigo_sdv
}
)}

function _82(md){return(
md`## URL stuff`
)}

function _objToUrlParam(lz){return(
function objToUrlParam(obj) {
  return lz.compressToEncodedURIComponent(JSON.stringify(obj));
}
)}

function _urlParamToObj(lz){return(
function urlParamToObj(urlParam) {
  return JSON.parse(lz.decompressFromEncodedURIComponent(urlParam));
}
)}

function _getCurrentConf($0,$1,intervalo,$2){return(
() => ({
  principalUrlids: $0.value.value.urlids,
  municipios: $1.value,
  intervalo: intervalo,
  trilhas: $2.value.map((t) => {
    let obj = {};
    Object.assign(obj, t);
    if (obj.filtros) {
      obj.filtrosUrlids = obj.filtros.value.urlids;
      delete obj.filtros;
    }
    return obj;
  })
})
)}

function _defaultConf(){return(
{
  principalUrlids: "",
  municipios: [{nome: "RIO DE JANEIRO", cor: "#2F87F5"}],
  intervalo: [104, 469],
  trilhas: [
    {i: 0, mostra_media_movel: true, variavel: "PM25", alterar_tempo: null, poluente: "PM25"},
    {i: 2, mostra_media_movel: false, escala: "absoluto", variavel: "FETAL", alterar_tempo: null, show_filtros: false, filtrosUrlids: ""},
    {i: 3, mostra_media_movel: false, escala: "absoluto", neonatal: "PRECOCE", variavel: "NEONATAL", alterar_tempo: null, show_filtros: false, filtrosUrlids: ""},
    {i: 4, mostra_media_movel: false, escala: "absoluto", relparto: "ANTES", variavel: "RELPARTO", alterar_tempo: null, show_filtros: false, filtrosUrlids: ""}
  ]
}
)}

function _urlParamConf(URLSearchParams,urlParamToObj,sessionStorage,defaultConf)
{
  let urlParam = new URLSearchParams(window.location.search).get("conf"); //loads from URL
  if (urlParam) return urlParamToObj(urlParam);
  urlParam = sessionStorage.getItem("conf3"); //loads from previous visit to this tab
  if (urlParam) {
    let conf = JSON.parse(urlParam);
    let mun = sessionStorage.getItem("municipios");
    if (mun) conf.municipios = JSON.parse(mun);
    let inter = sessionStorage.getItem("intervalo");
    if (inter) conf.intervalo = JSON.parse(inter);
    return conf;    
  }
  urlParam = sessionStorage.getItem("municipios"); //loads with cities used in another tab
  if (urlParam) {
    let conf = defaultConf;
    conf.municipios = JSON.parse(urlParam);
    urlParam = sessionStorage.getItem("intervalo");
    conf.intervalo = JSON.parse(urlParam);
    return conf;
  }
  return //doesn't load anything
}


function _copyToClipboard(){return(
function copyToClipboard(text) {
  var fakeElem = document.body.appendChild(document.createElement("textarea"));
  fakeElem.style.position = "absolute";
  fakeElem.style.left = "-9999px";
  fakeElem.setAttribute("readonly", "");
  fakeElem.value = text;
  fakeElem.select();
  try {
    return document.execCommand("copy");
  } catch (err) {
    return false;
  } finally {
    fakeElem.parentNode.removeChild(fakeElem);
  }
}
)}

function _currentHref(){return(
"https://ampliasaude.github.io/trilhas5-3.html"
)}

function _copyLinkButton(svg,currentHref,objToUrlParam,getCurrentConf,copyToClipboard){return(
() => {
  let copy = svg`<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<title>Copiar link compartilhável</title>
<path d="M20 10C20 15.5228 15.5228 20 10 20C4.47715 20 0 15.5228 0 10C0 4.47715 4.47715 0 10 0C15.5228 0 20 4.47715 20 10Z" fill="#151472"/>
<path d="M6.045 10C6.045 11.026 6.8095 11.86 7.75 11.86H9.95V13H7.75C6.232 13 5 11.656 5 10C5 8.344 6.232 7 7.75 7H9.95V8.14H7.75C6.8095 8.14 6.045 8.974 6.045 10ZM8.3 9.4H12.7V10.6H8.3V9.4ZM13.25 13H11.05V11.86H13.25C14.1905 11.86 14.955 11.026 14.955 10C14.955 8.974 14.1905 8.14 13.25 8.14H11.05V7H13.25C14.768 7 16 8.344 16 10C16 11.656 14.768 13 13.25 13Z" fill="white"/>
</svg>`;
  copy.onclick = () => {
    let link = `${currentHref}?conf=${objToUrlParam(getCurrentConf())}`;
    copyToClipboard(link);
  };
  return copy;
}
)}

function _91(md){return(
md`## Poluentes`
)}

function _maxScale(){return(
{pm25_ugm3:60*2,so2_ugm3:60*1.5,no2_ppb:260*1.1,o3_ppb:140*1.1,co_ppb:9*1.1}
)}

function _volume_mol(){return(
(temperatura) => {
  //pV=nRT
  let R=0.08206 // (atm L) / (mol K)
  return R*(temperatura+293.15) //converte C para K
}
)}

function _massa_mol(){return(
{
  no2_ppb: 46.0055,
  o3_ppb: 48,
  co_ppb: 28.01
}
)}

function _padroes(){return(
{
  pm25_ugm3:[25,37,50,60], //ADEQUADO, PF, MI3, MI2, MI1
  so2_ugm3:[20,30,40,60],
  no2_ppb:[200,220,240,260],
  o3_ppb:[100,120,130,140],
  co_ppb:[9,9,9,9]
}
)}

function _fetchPM25(indicador,sqlSisam){return(
(municipio,filtros="TRUE")=>{
  let qry = `
      select 
        ano,
        mes,
        dia,
        max_${indicador} as valor,
        temperatura_c_media
      from 
        sisam
      where
          ano >= 2012
      group by
        1,2,3
 `;
  return sqlSisam(municipio, qry);
}
)}

function _procPM25(semanas_epidemiologicas,indicador,massa_mol,volume_mol){return(
(data)=>{
  let ret=data;
  data.forEach(row=>{
    let dict=row;

    //convert to epidemiological week
    let date=new Date(Date.UTC(dict.ano,dict.mes-1,dict.dia)) //utc month starts at 0
    for (let i of semanas_epidemiologicas) {
      if (date>=new Date(i.inicio)&&date<=new Date(i.termino)){
        dict["semana"]=+i.semana
        dict["x"]=i.inicio
        break
      }
    }

    if (dict.mes==1&&dict.semana==53){
      dict.ano-=1
      dict.mes=12
    }

  switch (indicador){
    case "no2_ppb":
    case "o3_ppb":
      let fator=massa_mol[indicador]/volume_mol(dict.temperatura)
      dict.valor*=fator

    case "co_ppb":
      dict.valor/=1000
  }
    
  })

  //grouping by ano and semana
  let ret2=[]
  for (let i of ret){
    let f=ret2.find(d=>d.x==i.x)
    if (f){
      f.valor+=i.valor
      //if (f.valor<i.valor)
      //  f.valor=i.valor
      f.temperatura_c_media+=i.temperatura_c_media
      f.cont+=1
    }
    else
      ret2.push({ano:i.ano, semana:i.semana, x:i.x, valor:i.valor||0, temperatura_c_media:i.temperatura_c_media, cont:1})
  }
  ret2=ret2.map(d=>{d.valor/=d.cont; d.temperatura_c_media/=d.cont; delete d.cont; return d;}).filter(d=>d.semana)
  //ret2=ret2.map(d=>{d.temperatura_c_media/=d.cont; delete d.cont; return d;}).filter(d=>d.semana)
  
  return ret2
}
)}

function _98(md){return(
md`## Mortalidade`
)}

function _fetchNeoNatal(agregacoes,municipios,datasource_sim){return(
async (municipio,filtros) => {
  let codMunicipio
  if (agregacoes.includes(municipio))
    codMunicipio = Math.floor(municipios.find(d=>d.sigla==municipio).codigo_sdv/10000)
  else
    codMunicipio = municipios.find(d=>d.municipio==municipio).codigo_sdv;
  return await datasource_sim.fetchNeoNatal(codMunicipio,filtros);
}
)}

function _fetchRelParto(agregacoes,municipios,datasource_sim){return(
async (municipio,filtros) => {
  let codMunicipio
  if (agregacoes.includes(municipio))
    codMunicipio = Math.floor(municipios.find(d=>d.sigla==municipio).codigo_sdv/10000)
  else
    codMunicipio = municipios.find(d=>d.municipio==municipio).codigo_sdv;
  return await datasource_sim.fetchRelParto(codMunicipio,filtros);
}
)}

function _procNeoNatal(procTOTALUnfiltered,semanas_epidemiologicas){return(
(d) => {
  let t=procTOTALUnfiltered(d[1])
  d=d[0]
  d.forEach(row=>{
    let dict=row;
    dict.data=new Date(dict.data)
    for (let i of semanas_epidemiologicas) {
      if (dict.data>=new Date(i.inicio)&&dict.data<=new Date(i.termino)){
        dict["x"]=i.inicio
        break
      }
    }
  })
  let ret = d;
  //grouping by ano and semana
  let ret2=[]
  for (let i of ret){
    let f=ret2.find(d=>d.x.getTime()==i.x.getTime())
    if (f){
      f.absoluto[i.neonatal]+=i.total
      f.total+=i.total
    }
    else
      ret2.push({x:i.x, absoluto:{PRECOCE:(i.neonatal=="PRECOCE")?i.total:0,NEOTOTAL:(i.neonatal=="NEOTOTAL")?i.total:0,TARDIO:(i.neonatal=="TARDIO")?i.total:0,POS:(i.neonatal=="POS")?i.total:0}, total:i.total})
  }
  semanas_epidemiologicas.filter(d=>!ret2.map(e=>e.x.getTime()
                                             ).includes(d.inicio.getTime())).forEach(d=>{
    ret2.push({x:d.inicio,absoluto:{PRECOCE:0,TARDIO:0,NEOTOTAL:0,POS:0},total:0})
  })

  ret2=ret2.map(d=>{
    d.percentual={}
    if (d.total){
      d.percentual["PRECOCE"]=100*d.absoluto["PRECOCE"]/d.total
      d.percentual["TARDIO"]=100*d.absoluto["TARDIO"]/d.total
      d.percentual["NEOTOTAL"]=100*d.absoluto["NEOTOTAL"]/d.total
      d.percentual["POS"]=100*d.absoluto["POS"]/d.total
    }
    else{
      d.percentual["PRECOCE"]=0
      d.percentual["TARDIO"]=0
      d.percentual["NEOTOTAL"]=0
      d.percentual["POS"]=0
    }
    d.taxa={}
    let total=t.find(t2=>t2.x.getTime()==d.x.getTime())
    if (total){
      d.taxa["PRECOCE"]=1000*d.absoluto["PRECOCE"]/total.valor
      d.taxa["TARDIO"]=1000*d.absoluto["TARDIO"]/total.valor
      d.taxa["NEOTOTAL"]=1000*d.absoluto["NEOTOTAL"]/total.valor
      d.taxa["POS"]=1000*d.absoluto["POS"]/total.valor
    }
    else{
      d.taxa["PRECOCE"]=0
      d.taxa["TARDIO"]=0
      d.taxa["NEOTOTAL"]=0
      d.taxa["POS"]=0
    }
    return d;})
  let resp = ret2.sort((a,b)=>a.x.getTime()-b.x.getTime());
  return resp;
}
)}

function _procRelParto(procTOTALUnfiltered,semanas_epidemiologicas){return(
(d) => {
  let t=procTOTALUnfiltered(d[1])
  d=d[0]
  d.forEach(row=>{
    let dict=row;
    dict.data=new Date(dict.data)
    for (let i of semanas_epidemiologicas) {
      if (dict.data>=new Date(i.inicio)&&dict.data<=new Date(i.termino)){
        dict["x"]=i.inicio
        break
      }
    }
  })
  let ret = d;
  //grouping by ano and semana
  let ret2=[]
  for (let i of ret){
    let f=ret2.find(d=>d.x.getTime()==i.x.getTime())
    if (f){
      f.absoluto[i.relparto]+=i.total
      f.total+=i.total
    }
    else
      ret2.push({x:i.x, absoluto:{ANTES:(i.relparto=="ANTES")?i.total:0,DURANTE:(i.relparto=="DURANTE")?i.total:0,DEPOIS:(i.relparto=="DEPOIS")?i.total:0}, total:i.total})
  }
  semanas_epidemiologicas.filter(d=>!ret2.map(e=>e.x.getTime()).includes(d.inicio.getTime())).forEach(d=>{
    ret2.push({x:d.inicio,absoluto:{ANTES:0,DURANTE:0,DEPOIS:0},total:0})
  })

  ret2=ret2.map(d=>{
    d.percentual={}
    if (d.total){
      d.percentual["ANTES"]=100*d.absoluto["ANTES"]/d.total
      d.percentual["DURANTE"]=100*d.absoluto["DURANTE"]/d.total
      d.percentual["DEPOIS"]=100*d.absoluto["DEPOIS"]/d.total
    }
    else{
      d.percentual["ANTES"]=0
      d.percentual["DURANTE"]=0
      d.percentual["DEPOIS"]=0
    }
    d.taxa={}
    let total=t.find(t2=>t2.x.getTime()==d.x.getTime())
    if (total){
      d.taxa["ANTES"]=1000*d.absoluto["ANTES"]/total.valor
      d.taxa["DURANTE"]=1000*d.absoluto["DURANTE"]/total.valor
      d.taxa["DEPOIS"]=1000*d.absoluto["DEPOIS"]/total.valor
    }
    else{
      d.taxa["ANTES"]=0
      d.taxa["DURANTE"]=0
      d.taxa["DEPOIS"]=0
    }
    return d;})
  let resp = ret2.sort((a,b)=>a.x.getTime()-b.x.getTime());
  return resp;
}
)}

function _procTOTALUnfiltered(semanas_epidemiologicas){return(
(d)=>{
  let ret = [];
  d.forEach(row=>{
    let dict=row;
    dict.data=new Date(dict.data)
    if (dict.data.getFullYear()<2011) return
    //convert to epidemiological week
    for (let i of semanas_epidemiologicas) {
      if (dict.data>=new Date(i.inicio)&&dict.data<=new Date(i.termino)){
        dict["x"]=i.inicio
        break
      }
    }
    ret.push(dict);
  });
  //grouping by ano and semana
  let ret2=[]
  for (let i of ret){
    let f=ret2.find(d=>d.x.getTime()==i.x.getTime())
    if (f){
      f.valor+=i.valor
    }
    else
      ret2.push({x:i.x, valor:i.valor})
  }
  ret2=ret2.filter(d=>d.x)
  
  return ret2
}
)}

function _procFetalUnfiltered(semanas_epidemiologicas){return(
(d)=>{
  let ret = [];
  d.forEach(row=>{
    let dict=row;
    dict.data=new Date(dict.data)
    if (dict.data.getFullYear()<2011) return
    //convert to epidemiological week
    for (let i of semanas_epidemiologicas) {
      if (dict.data>=new Date(i.inicio)&&dict.data<=new Date(i.termino)){
        dict["x"]=i.inicio
        break
      }
    }
    ret.push(dict);
  });
  //grouping by ano and semana
  let ret2=[]
  for (let i of ret){
    let f=ret2.find(d=>d.x.getTime()==i.x.getTime())
    if (f){
      f.valor+=i.valor
    }
    else
      ret2.push({x:i.x, valor:i.valor})
  }
  ret2=ret2.filter(d=>d.x)
  
  return ret2
}
)}

function _fetchTOTAL(agregacoes,municipios,datasource_sim){return(
async (municipio,filtros) => {
  let codMunicipio
  if (agregacoes.includes(municipio))
    codMunicipio = Math.floor(municipios.find(d=>d.sigla==municipio).codigo_sdv/10000)
  else
    codMunicipio = municipios.find(d=>d.municipio==municipio).codigo_sdv;
  return await datasource_sim.fetchTotal(codMunicipio,filtros);
}
)}

function _fetchFetal(agregacoes,municipios,datasource_sim){return(
async (municipio,filtros) => {
  let codMunicipio
  if (agregacoes.includes(municipio))
    codMunicipio = Math.floor(municipios.find(d=>d.sigla==municipio).codigo_sdv/10000)
  else
    codMunicipio = municipios.find(d=>d.municipio==municipio).codigo_sdv;
  return await datasource_sim.fetchFetal(codMunicipio,filtros);
}
)}

function _procTOTAL(procTOTALUnfiltered,semanas_epidemiologicas){return(
(d)=>{
  let t=procTOTALUnfiltered(d[1])
  d=d[0]
  let ret=[]
  d.forEach(row=>{
    let dict=row;
    dict.data=new Date(dict.data)
    if (dict.data.getFullYear()<2011) return
    //convert to epidemiological week
    for (let i of semanas_epidemiologicas) {
      if (dict.data>=new Date(i.inicio)&&dict.data<=new Date(i.termino)){
        dict["x"]=i.inicio
        break
      }
    }
    
    ret.push(dict)
  })

  //grouping by ano and semana
  let ret2=[]
  for (let i of ret){
    let f=ret2.find(d=>d.x.getTime()==i.x.getTime())
    if (f){
      f.absoluto+=i.valor
    }
    else
      ret2.push({x:i.x, absoluto:i.valor})
  }
  ret2=ret2.filter(d=>d.x)

  ret2=ret2.map(d=>{
    d.percentual={}
    let total=t.find(t2=>t2.x.getTime()==d.x.getTime())
    if (total){
      d.percentual=100*d.absoluto/total.valor
    }
    else{
      d.percentual=0
    }
    return d;})
  
  return ret2
}
)}

function _procFetal(procFetalUnfiltered,semanas_epidemiologicas){return(
(d)=>{
  let t=procFetalUnfiltered(d[1])
  d=d[0]
  let ret=[]
  d.forEach(row=>{
    let dict=row;
    dict.data=new Date(dict.data)
    if (dict.data.getFullYear()<2011) return
    //convert to epidemiological week
    for (let i of semanas_epidemiologicas) {
      if (dict.data>=new Date(i.inicio)&&dict.data<=new Date(i.termino)){
        dict["x"]=i.inicio
        break
      }
    }
    
    ret.push(dict)
  })

  //grouping by ano and semana
  let ret2=[]
  for (let i of ret){
    let f=ret2.find(d=>d.x.getTime()==i.x.getTime())
    if (f){
      f.absoluto+=i.valor
    }
    else
      ret2.push({x:i.x, absoluto:i.valor})
  }
  ret2=ret2.filter(d=>d.x)

  ret2=ret2.map(d=>{
    d.percentual={}
    let total=t.find(t2=>t2.x.getTime()==d.x.getTime())
    if (total){
      d.percentual=100*d.absoluto/total.valor
    }
    else{
      d.percentual=0
    }
    return d;})
  
  return ret2
}
)}

function _109(md){return(
md`## Imports`
)}

function _Sortable(require){return(
require('sortablejs/Sortable.js')
)}

function _d3_5(require){return(
require('d3@5')
)}

function _slider_snap(layout,d3_5,DOM,months,semanas_epidemiologicas,$0,d3){return(
function(min, max, starting_min=min, starting_max=max, width2=layout.width,margin_left=60) {

  var range = [min, max + 1]
  var starting_range = [starting_min, starting_max + 1]

  // set width and height of svg
  var w = width2
  var h = layout.height
  var margin = layout.margin

  // dimensions of slider bar
  var width = w - margin_left - margin.right;
  var height = h - margin.top - margin.bottom;

  // create x scale
  var x = d3_5.scaleLinear()
    .domain(range)  // data space
    .range([0, width]);  // display space
  
  // create svg and translated g
  var svg = d3_5.select(DOM.svg(w,h))
  const g = svg.append('g').attr('transform', `translate(${margin_left}, ${margin.top})`)
  
  // labels
  var labelL = g.append('text')
    .attr('id', 'labelleft')
    .attr('x', 0)
    .attr('y', height + 5)
    .style("display",margin_left==60?"inline":"none")
    .text(months[semanas_epidemiologicas[range[0]].inicio.getMonth()]+" "+semanas_epidemiologicas[range[0]].inicio.getFullYear())

  var labelR = g.append('text')
    .attr('id', 'labelright')
    .attr('x', 0)
    .attr('y', height + 5)
    .style("display",margin_left==60?"inline":"none")
    .text(months[semanas_epidemiologicas[range[1]].termino.getMonth()]+" "+semanas_epidemiologicas[range[1]].termino.getFullYear())

  var labelL2 = g.append('text')
    .attr('id', 'labelleft2')
    .attr('x', -8)
    .attr('y', height - height/2 + 1)
    .style("alignment-baseline","middle")
    .text(2012)

  var labelR2 = g.append('text')
    .attr('id', 'labelright2')
    .attr('x', width + 8)
    .attr('y', height - height/2 + 1)
    .style("alignment-baseline","middle")
    .text(2019)

  // define brush
  var brush = d3_5.brushX()
    .extent([[0,0], [width, height]])
    .on('brush', function() {
      var s = d3_5.event.selection;
      // update and move labels
      labelL.attr('x', s[0])
        .text(months[semanas_epidemiologicas[Math.round(x.invert(s[0]))].inicio.getMonth()]+" "+semanas_epidemiologicas[Math.round(x.invert(s[0]))].inicio.getFullYear())
      labelR.attr('x', s[1])
        .text(months[semanas_epidemiologicas[Math.round(x.invert(s[1]))].termino.getMonth()]+" "+semanas_epidemiologicas[Math.round(x.invert(s[1]))].termino.getFullYear())
      // move brush handles      
      handle.attr("display", null).attr("transform", function(d, i) { return "translate(" + [ s[i], - height / 4] + ")"; });
      // update view
      // if the view should only be updated after brushing is over, 
      // move these two lines into the on('end') part below
      svg.node().value = s.map(d => Math.round(x.invert(d)));
      svg.node().dispatchEvent(new CustomEvent("input"));
    })
    .on('end', function() {
      if (!d3_5.event.sourceEvent) return;
      var d0 = d3_5.event.selection.map(x.invert);
      var d1 = d0.map(Math.round)
      d3_5.select(this).transition().call(d3_5.event.target.move, d1.map(x))
      $0.value=Math.max(Math.min(new Date($0.value), semanas_epidemiologicas[svg.node().value[1]-2].termino), semanas_epidemiologicas[svg.node().value[0]].inicio);
    })

  // append brush to g
  var gBrush = g.append("g")
      .attr("class", "brush")
      .call(brush)

  // add brush handles (from https://bl.ocks.org/Fil/2d43867ba1f36a05459c7113c7f6f98a)
  var brushResizePath = function(d) {
      let a=3, b=3, y=15;
      return `M ${-a} ${y-b} A ${a} ${a} 0 0 1 ${a} ${y-b} V ${y+b} A ${a} ${a} 0 0 1 ${-a} ${y+b} Z`;
  }

  var handle = gBrush.selectAll(".handle--custom")
    .data([{type: "w"}, {type: "e"}])
    .enter().append("path")
    .attr("class", "handle--custom")
    .attr("stroke", "#000")
    .attr("fill", '#151472')
    .attr("cursor", "ew-resize")
    .attr("y",height/2)
    .attr("d", brushResizePath);
    
  // override default behaviour - clicking outside of the selected area 
  // will select a small piece there rather than deselecting everything
  // https://bl.ocks.org/mbostock/6498000
  gBrush.selectAll(".overlay")
    .attr("fill","#E5E5E5")
    .each(function(d) { d.type = "selection"; })
    .on("mousedown touchstart", brushcentered)
  
  function brushcentered() {
    var dx = x(1) - x(0), // Use a fixed width when recentering.
    cx = d3.mouse(this)[0],
    x0 = cx - dx / 2,
    x1 = cx + dx / 2;
    d3.select(this.parentNode).call(brush.move, x1 > width ? [width - dx, width] : x0 < 0 ? [0, dx] : [x0, x1]);
  }
  
  // select entire starting range
  gBrush.call(brush.move, starting_range.map(x))

    // draw background lines
  g.append('g').selectAll('line')
    .data(semanas_epidemiologicas.filter(d=>d.semana==1).map(d=>semanas_epidemiologicas.findIndex(e=>e==d)))
    .enter()
    .append('line')
    .attr('x1', d => x(d)).attr('x2', d => x(d))
    .attr('y1', 0).attr('y2', height)
    .style('stroke', '#ccc')
  
  return svg.node()
}
)}

function _layout(){return(
{
  width: 600,
  height: 60,
  margin: {
    top: 20,
    bottom: 20,
    left: 60,
    right: 60
  }
}
)}

function _style_slider(html){return(
html`
<style>
@import url('https://fonts.googleapis.com/css2?family=Roboto+Condensed:wght@400;700&display=swap');
svg {
	font-family: "Roboto Condensed";
}

rect.overlay {
	stroke: none;
}

rect.selection {
	stroke: none;
  fill: rgba(21, 20, 114, 0.6);
}

#labelleft, #labelright, #labelright2, #labelleft2 {
	dominant-baseline: hanging;
  font-size: 12px;
  font-weight: 400;
  fill: #151472;
}

#labelleft, #labelleft2 {
	text-anchor: end;
}

#labelright, #labelright2 {
	text-anchor: start;
}
</style>
`
)}

function _lz(require){return(
require("https://bundle.run/lz-string@1.4.4")
)}

function _style_menu(html){return(
html`<style>
  @import url(https://fonts.googleapis.com/css2?family=Roboto+Condensed:wght@300;400;700&display=swap);
  @import url(https://fonts.googleapis.com/icon?family=Material+Icons);    
</style>
`
)}

function _novoMenuMun(html,agregacoes,municipios){return(
html`
<div class="custom-select" style="width:200px;">
  <select>
<option value="Adicione um local">Adicione um local</option>
${agregacoes.map(d=>"<option value='"+d+"'>"+d+"</option>")}
${municipios.map(d=>d.municipio).sort(Intl.Collator().compare).map(d=>"<option value='"+d+"'>"+d+"</option>")}
  </select>
</div>
`
)}

function _styleMenuMun(html){return(
html`
<style>
/* The container must be positioned relative: */
.custom-select {
  position: relative;
  font-family: "Roboto Condensed";
}

.custom-select select {
  display: none; /*hide original SELECT element: */
}

.select-selected {
  border-radius: 6px;
  background-color: white;
  border: dashed 2px #C4C4C4;
  font-family: "Roboto Condensed";
  padding: 3px;
  min-width: 80px;
  max-width: 240px;
}

/* Style the arrow inside the select element: */
.select-selected:after {
  position: absolute;
  content: "";
  top: 14px;
  right: 10px;
  width: 0;
  height: 0;
  border: 6px solid transparent;
  border-color: #000 transparent transparent transparent;
}

/* Point the arrow upwards when the select box is open (active): */
.select-selected.select-arrow-active:after {
  border-color: transparent transparent #000 transparent;
  top: 7px;
}

/* style the items (options), including the selected item: */
.select-items div {
  color: #000000;
  padding: 8px 16px;
  border: 1px solid transparent;
  border-color: transparent transparent rgba(0, 0, 0, 0.1) transparent;
  cursor: pointer;
}

/* Style items (options): */
.select-items {
  position: absolute;
  background-color: white;
  top: 100%;
  left: 0;
  right: 0;
  z-index: 99;
  max-height: 500px;
  overflow-y: auto;
  overflow-x: hidden;
}

/* Hide the items when the select box is closed: */
.select-hide {
  display: none;
}

.select-items div:hover, .same-as-selected {
  background-color: rgba(0, 0, 0, 0.1);
}
</style>
`
)}

function _initializeMenuMun(novoMenuMun)
{
novoMenuMun;
var x, i, j, l, ll, selElmnt, a, b, c;
/* Look for any elements with the class "custom-select": */
x = document.getElementsByClassName("custom-select");
l = x.length;
for (i = 0; i < l; i++) {
  selElmnt = x[i].getElementsByTagName("select")[0];
  ll = selElmnt.length;
  /* For each element, create a new DIV that will act as the selected item: */
  a = document.createElement("DIV");
  a.setAttribute("class", "select-selected");
  a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
  x[i].appendChild(a);
  /* For each element, create a new DIV that will contain the option list: */
  b = document.createElement("DIV");
  b.setAttribute("class", "select-items select-hide");
  for (j = 1; j < ll; j++) {
    /* For each option in the original select element,
    create a new DIV that will act as an option item: */
    c = document.createElement("DIV");
    c.innerHTML = selElmnt.options[j].innerHTML;
    c.addEventListener("click", function(e) {
        /* When an item is clicked, update the original select box,
        and the selected item: */
        var y, i, k, s, h, sl, yl;
        s = this.parentNode.parentNode.getElementsByTagName("select")[0];
        sl = s.length;
        h = this.parentNode.previousSibling;
        for (i = 0; i < sl; i++) {
          if (s.options[i].innerHTML == this.innerHTML) {
            s.selectedIndex = i;
            h.innerHTML = this.innerHTML;
            y = this.parentNode.getElementsByClassName("same-as-selected");
            yl = y.length;
            for (k = 0; k < yl; k++) {
              y[k].removeAttribute("class");
            }
            this.setAttribute("class", "same-as-selected");
            break;
          }
        }
        h.click();
    });
    b.appendChild(c);
  }
  x[i].appendChild(b);
  a.addEventListener("click", function(e) {
    /* When the select box is clicked, close any other select boxes,
    and open/close the current select box: */
    e.stopPropagation();
    closeAllSelect(this);
    this.nextSibling.classList.toggle("select-hide");
    this.classList.toggle("select-arrow-active");
  });
}

function closeAllSelect(elmnt) {
  /* A function that will close all select boxes in the document,
  except the current select box: */
  var x, y, i, xl, yl, arrNo = [];
  x = document.getElementsByClassName("select-items");
  y = document.getElementsByClassName("select-selected");
  xl = x.length;
  yl = y.length;
  for (i = 0; i < yl; i++) {
    if (elmnt == y[i]) {
      arrNo.push(i)
    } else {
      y[i].classList.remove("select-arrow-active");
    }
  }
  for (i = 0; i < xl; i++) {
    if (arrNo.indexOf(i)) {
      x[i].classList.add("select-hide");
    }
  }
}

/* If the user clicks anywhere outside the select box,
then close all select boxes: */
document.addEventListener("click", closeAllSelect);
}


export default function define(runtime, observer) {
  const main = runtime.module();
  function toString() { return this.url; }
  const fileAttachments = new Map([
    ["semanas_epidemiologicas_estendido.csv", {url: new URL("./files/f2201770123f4b364781aee7ac3512db444637a3ad42ef096c62d05e6637e8d48b4875ec59b514f9f028ae6c85b557a5d74de4b1e2d1c18d62c5114c6c9c27fa.csv", import.meta.url), mimeType: "text/csv", toString}],
    ["municipios2.csv", {url: new URL("./files/186949b230e46bbd80611c8b1224e2003c90fd71528ff034cabe25dc74445f782670632623e35cfdc778c27fcc6fce67fe7fc4e12ef7168cbf594a25934412d3.csv", import.meta.url), mimeType: "text/csv", toString}]
  ]);
  main.builtin("FileAttachment", runtime.fileAttachments(name => fileAttachments.get(name)));
  main.variable(observer()).define(["md"], _1);
  main.variable(observer("cabecalho")).define("cabecalho", ["html","copyLinkButton"], _cabecalho);
  main.define("initial mp", ["urlParamConf","ampliaMenu"], _mp);
  main.variable(observer("mutable mp")).define("mutable mp", ["Mutable", "initial mp"], (M, _) => new M(_));
  main.variable(observer("mp")).define("mp", ["mutable mp"], _ => _.generator);
  main.variable(observer("div_controles")).define("div_controles", ["html","barra_municipios","viewof intervalo"], _div_controles);
  main.variable(observer("vis")).define("vis", ["conf_trilhas","funcoesGeradoras","gAdicionaTrilha","Sortable","mutable conf_trilhas","updateTooltipPositon","d3"], _vis);
  main.variable(observer("updateTooltipPositon")).define("updateTooltipPositon", _updateTooltipPositon);
  main.variable(observer("maxMunicipios")).define("maxMunicipios", _maxMunicipios);
  main.variable(observer("viewof intervalo")).define("viewof intervalo", ["urlParamConf","slider_snap","defaultConf"], _intervalo);
  main.variable(observer("intervalo")).define("intervalo", ["Generators", "viewof intervalo"], (G, _) => G.input(_));
  main.variable(observer("barra_municipios")).define("barra_municipios", ["html","sel_municipios","remove_mun_button","maxMunicipios","menu_municipios"], _barra_municipios);
  main.variable(observer("menu_municipios")).define("menu_municipios", ["d3","html","agregacoes","municipios","sel_municipios","maxMunicipios","mutable sel_municipios","colors","conf_trilhas","funcoesFetch","mp","mutable data","funcoesProc","data"], _menu_municipios);
  main.variable(observer("listenerFiltroGlobal")).define("listenerFiltroGlobal", ["mutable conf_trilhas","mutable data","mutable sel_municipios","funcoesFetch","funcoesProc"], _listenerFiltroGlobal);
  main.variable(observer("remove_mun_button")).define("remove_mun_button", ["d3","sel_municipios","mutable sel_municipios","mutable data","data","agregacoes","municipios"], _remove_mun_button);
  main.variable(observer("remove_trilha_button")).define("remove_trilha_button", ["d3","removeTrilha"], _remove_trilha_button);
  main.variable(observer("copy_button")).define("copy_button", ["d3","copyTrilha"], _copy_button);
  main.variable(observer("funcoesGeradoras")).define("funcoesGeradoras", ["gPM25","gNEONATAL","gRELPARTO","gFETAL","gTOTAL"], _funcoesGeradoras);
  main.variable(observer("funcoesProc")).define("funcoesProc", ["procPM25","procNeoNatal","procTOTAL","procFetal","procRelParto"], _funcoesProc);
  main.variable(observer("funcoesFetch")).define("funcoesFetch", ["fetchPM25","fetchNeoNatal","fetchTOTAL","fetchFetal","fetchRelParto"], _funcoesFetch);
  main.variable(observer("corTrilha")).define("corTrilha", _corTrilha);
  main.variable(observer("corTrilhaFraco")).define("corTrilhaFraco", _corTrilhaFraco);
  main.variable(observer("style")).define("style", ["html","height"], _style);
  main.variable(observer("legendTooltip")).define("legendTooltip", ["d3","valoresLista","corTrilhaFraco"], _legendTooltip);
  main.variable(observer("valoresLista")).define("valoresLista", ["sel_municipios","data","semanas_epidemiologicas","d3","sel","unidades","agregacoes","siglas","bisector"], _valoresLista);
  main.variable(observer("mouseDisplace")).define("mouseDisplace", _mouseDisplace);
  main.variable(observer("iconeContinuo")).define("iconeContinuo", ["svg"], _iconeContinuo);
  main.variable(observer("iconeTracejado")).define("iconeTracejado", ["svg"], _iconeTracejado);
  main.variable(observer("iconeEspesso")).define("iconeEspesso", ["svg"], _iconeEspesso);
  main.variable(observer("iconeFino")).define("iconeFino", ["svg"], _iconeFino);
  main.variable(observer("gPM25")).define("gPM25", ["Plot","width","height","formatTime","conf_trilhas","semanas_epidemiologicas","intervalo","maxScale","indicador","padroes","data","siglas","filterDate","janela","lineWidth","sel_municipios","bisector","sel","legendTooltip","mutable sel","mouseDisplace","d3","html","corTrilha","removeTrilha","copy_button","checkMediaMovel","checkTempo","inner_slider"], _gPM25);
  main.variable(observer("gFETAL")).define("gFETAL", ["sel_municipios","data","gLoadingTrilha","conf_trilhas","mp","Plot","width","height","semanas_epidemiologicas","intervalo","filterDate","janela","lineWidthFiltered","lineWidth","bisector","sel","legendTooltip","mutable sel","d3","mouseDisplace","html","corTrilha","removeTrilha","copy_button","checkMediaMovel","checkTempo","checkEscala","inner_slider","checkFiltros"], _gFETAL);
  main.variable(observer("gNEONATAL")).define("gNEONATAL", ["sel_municipios","data","gLoadingTrilha","conf_trilhas","mp","Plot","width","height","semanas_epidemiologicas","intervalo","filterDate","janela","lineWidthFiltered","lineWidth","bisector","sel","legendTooltip","mutable sel","d3","mouseDisplace","html","corTrilha","removeTrilha","copy_button","checkNeoNatal","checkMediaMovel","checkTempo","checkEscala","inner_slider","checkFiltros"], _gNEONATAL);
  main.variable(observer("gRELPARTO")).define("gRELPARTO", ["sel_municipios","data","gLoadingTrilha","conf_trilhas","mp","Plot","width","height","semanas_epidemiologicas","intervalo","filterDate","janela","lineWidthFiltered","lineWidth","bisector","sel","legendTooltip","mutable sel","d3","mouseDisplace","html","corTrilha","removeTrilha","copy_button","checkRelParto","checkMediaMovel","checkTempo","checkEscala","inner_slider","checkFiltros"], _gRELPARTO);
  main.variable(observer("gTOTAL")).define("gTOTAL", ["sel_municipios","data","gLoadingTrilha","conf_trilhas","mp","Plot","width","height","semanas_epidemiologicas","intervalo","filterDate","janela","lineWidthFiltered","lineWidth","bisector","sel","legendTooltip","mutable sel","d3","mouseDisplace","html","corTrilha","removeTrilha","copy_button","checkMediaMovel","checkTempo","checkEscala","inner_slider","checkFiltros"], _gTOTAL);
  main.variable(observer("gListaValores")).define("gListaValores", ["conf_trilhas","data","html","semanas_epidemiologicas","d3","sel","iconeEspesso","siglas","sel_municipios","bisector","iconeFino","unidades","agregacoes"], _gListaValores);
  main.variable(observer("gAdicionaTrilha")).define("gAdicionaTrilha", ["html","d3","removeTrilha","copyTrilha","width","addTrilha"], _gAdicionaTrilha);
  main.variable(observer("gLoadingTrilha")).define("gLoadingTrilha", ["html","d3","removeTrilha","copyTrilha","width"], _gLoadingTrilha);
  main.variable(observer("copyTrilha")).define("copyTrilha", ["conf_trilhas","d3","listenerFiltro","mutable conf_trilhas","data","mutable data"], _copyTrilha);
  main.variable(observer("removeTrilha")).define("removeTrilha", ["mutable conf_trilhas","conf_trilhas","mutable data","data"], _removeTrilha);
  main.variable(observer("addTrilha")).define("addTrilha", ["d3","conf_trilhas","mutable conf_trilhas","sel_municipios","fetchPM25","mutable data","procPM25","ampliaMenu","corTrilha","listenerFiltro","fetchNeoNatal","procNeoNatal","fetchRelParto","procRelParto","fetchFetal","procFetal","fetchTOTAL","procTOTAL"], _addTrilha);
  main.variable(observer("inner_slider")).define("inner_slider", ["conf_trilhas","slider_snap","width","mutable conf_trilhas"], _inner_slider);
  main.variable(observer("checkPoluente")).define("checkPoluente", ["conf_trilhas","mutable conf_trilhas"], _checkPoluente);
  main.variable(observer("checkFiltros")).define("checkFiltros", ["conf_trilhas","mutable data","ampliaMenu","mp","corTrilha","listenerFiltro","mutable sel_municipios","funcoesFetch","funcoesProc","mutable conf_trilhas"], _checkFiltros);
  main.variable(observer("checkTempo")).define("checkTempo", ["conf_trilhas","intervalo","mutable conf_trilhas"], _checkTempo);
  main.variable(observer("checkNeoNatal")).define("checkNeoNatal", ["conf_trilhas","mutable conf_trilhas"], _checkNeoNatal);
  main.variable(observer("checkRelParto")).define("checkRelParto", ["conf_trilhas","mutable conf_trilhas"], _checkRelParto);
  main.variable(observer("checkEscala")).define("checkEscala", ["conf_trilhas","mutable conf_trilhas"], _checkEscala);
  main.variable(observer("checkMediaMovel")).define("checkMediaMovel", ["conf_trilhas","mutable conf_trilhas"], _checkMediaMovel);
  main.variable(observer("converteIntervalo")).define("converteIntervalo", ["semanas_epidemiologicas"], _converteIntervalo);
  main.define("initial conf_principal", _conf_principal);
  main.variable(observer("mutable conf_principal")).define("mutable conf_principal", ["Mutable", "initial conf_principal"], (M, _) => new M(_));
  main.variable(observer("conf_principal")).define("conf_principal", ["mutable conf_principal"], _ => _.generator);
  main.define("initial conf_trilhas", ["urlParamConf","ampliaMenu","corTrilha"], _conf_trilhas);
  main.variable(observer("mutable conf_trilhas")).define("mutable conf_trilhas", ["Mutable", "initial conf_trilhas"], (M, _) => new M(_));
  main.variable(observer("conf_trilhas")).define("conf_trilhas", ["mutable conf_trilhas"], _ => _.generator);
  main.variable(observer("unidades")).define("unidades", _unidades);
  main.variable(observer("lineWidth")).define("lineWidth", _lineWidth);
  main.variable(observer("lineWidthFiltered")).define("lineWidthFiltered", _lineWidthFiltered);
  main.define("initial firstload", _firstload);
  main.variable(observer("mutable firstload")).define("mutable firstload", ["Mutable", "initial firstload"], (M, _) => new M(_));
  main.variable(observer("firstload")).define("firstload", ["mutable firstload"], _ => _.generator);
  main.define("initial municipiosDefault", ["urlParamConf","defaultConf"], _municipiosDefault);
  main.variable(observer("mutable municipiosDefault")).define("mutable municipiosDefault", ["Mutable", "initial municipiosDefault"], (M, _) => new M(_));
  main.variable(observer("municipiosDefault")).define("municipiosDefault", ["mutable municipiosDefault"], _ => _.generator);
  main.variable(observer("onfirstload")).define("onfirstload", ["firstload","mutable municipiosDefault","mutable sel_municipios","conf_trilhas","funcoesFetch","mp","mutable data","funcoesProc","listenerFiltro","listenerFiltroGlobal","sessionStorage","getCurrentConf","viewof intervalo","mutable firstload"], _onfirstload);
  main.variable(observer("listenerFiltro")).define("listenerFiltro", ["mutable data","mutable sel_municipios","funcoesFetch","funcoesProc"], _listenerFiltro);
  main.variable(observer("viewof janela")).define("viewof janela", ["Inputs"], _janela);
  main.variable(observer("janela")).define("janela", ["Generators", "viewof janela"], (G, _) => G.input(_));
  main.variable(observer("viewof indicador")).define("viewof indicador", ["Inputs"], _indicador);
  main.variable(observer("indicador")).define("indicador", ["Generators", "viewof indicador"], (G, _) => G.input(_));
  main.variable(observer("colors")).define("colors", _colors);
  main.define("initial sel_variaveis", _sel_variaveis);
  main.variable(observer("mutable sel_variaveis")).define("mutable sel_variaveis", ["Mutable", "initial sel_variaveis"], (M, _) => new M(_));
  main.variable(observer("sel_variaveis")).define("sel_variaveis", ["mutable sel_variaveis"], _ => _.generator);
  main.define("initial sel_municipios", _sel_municipios);
  main.variable(observer("mutable sel_municipios")).define("mutable sel_municipios", ["Mutable", "initial sel_municipios"], (M, _) => new M(_));
  main.variable(observer("sel_municipios")).define("sel_municipios", ["mutable sel_municipios"], _ => _.generator);
  main.define("initial sel", ["semanas_epidemiologicas","d3","urlParamConf","defaultConf"], _sel);
  main.variable(observer("mutable sel")).define("mutable sel", ["Mutable", "initial sel"], (M, _) => new M(_));
  main.variable(observer("sel")).define("sel", ["mutable sel"], _ => _.generator);
  main.variable(observer("bisector")).define("bisector", ["d3"], _bisector);
  main.variable(observer("formatTime")).define("formatTime", ["d3"], _formatTime);
  main.variable(observer("computaMediaMovel")).define("computaMediaMovel", ["janela"], _computaMediaMovel);
  main.variable(observer("periodoInicio")).define("periodoInicio", ["intervalo"], _periodoInicio);
  main.variable(observer("periodoFim")).define("periodoFim", ["intervalo"], _periodoFim);
  main.variable(observer("filterDate")).define("filterDate", ["conf_trilhas","janela","semanas_epidemiologicas","periodoInicio","periodoFim"], _filterDate);
  main.variable(observer("height")).define("height", _height);
  main.define("initial loading", _loading);
  main.variable(observer("mutable loading")).define("mutable loading", ["Mutable", "initial loading"], (M, _) => new M(_));
  main.variable(observer("loading")).define("loading", ["mutable loading"], _ => _.generator);
  main.variable(observer("sqlSisam")).define("sqlSisam", ["mutable loading","municipios","SQLiteDatabaseClient"], _sqlSisam);
  main.variable(observer("style2")).define("style2", ["html"], _style2);
  main.variable(observer("municipios")).define("municipios", ["FileAttachment"], _municipios);
  main.variable(observer("semanas_epidemiologicas")).define("semanas_epidemiologicas", ["FileAttachment"], _semanas_epidemiologicas);
  main.variable(observer("capitais")).define("capitais", _capitais);
  main.variable(observer("siglas")).define("siglas", _siglas);
  main.define("initial data", _data);
  main.variable(observer("mutable data")).define("mutable data", ["Mutable", "initial data"], (M, _) => new M(_));
  main.variable(observer("data")).define("data", ["mutable data"], _ => _.generator);
  main.define("initial cache", _cache);
  main.variable(observer("mutable cache")).define("mutable cache", ["Mutable", "initial cache"], (M, _) => new M(_));
  main.variable(observer("cache")).define("cache", ["mutable cache"], _ => _.generator);
  main.variable(observer("months")).define("months", _months);
  main.variable(observer("agregacoes")).define("agregacoes", ["siglas"], _agregacoes);
  main.variable(observer("queryLocalSISAM")).define("queryLocalSISAM", ["agregacoes","siglas","municipios"], _queryLocalSISAM);
  main.variable(observer()).define(["md"], _82);
  main.variable(observer("objToUrlParam")).define("objToUrlParam", ["lz"], _objToUrlParam);
  main.variable(observer("urlParamToObj")).define("urlParamToObj", ["lz"], _urlParamToObj);
  main.variable(observer("getCurrentConf")).define("getCurrentConf", ["mutable mp","mutable sel_municipios","intervalo","mutable conf_trilhas"], _getCurrentConf);
  main.variable(observer("defaultConf")).define("defaultConf", _defaultConf);
  main.variable(observer("urlParamConf")).define("urlParamConf", ["URLSearchParams","urlParamToObj","sessionStorage","defaultConf"], _urlParamConf);
  main.variable(observer("copyToClipboard")).define("copyToClipboard", _copyToClipboard);
  main.variable(observer("currentHref")).define("currentHref", _currentHref);
  main.variable(observer("copyLinkButton")).define("copyLinkButton", ["svg","currentHref","objToUrlParam","getCurrentConf","copyToClipboard"], _copyLinkButton);
  main.variable(observer()).define(["md"], _91);
  main.variable(observer("maxScale")).define("maxScale", _maxScale);
  main.variable(observer("volume_mol")).define("volume_mol", _volume_mol);
  main.variable(observer("massa_mol")).define("massa_mol", _massa_mol);
  main.variable(observer("padroes")).define("padroes", _padroes);
  main.variable(observer("fetchPM25")).define("fetchPM25", ["indicador","sqlSisam"], _fetchPM25);
  main.variable(observer("procPM25")).define("procPM25", ["semanas_epidemiologicas","indicador","massa_mol","volume_mol"], _procPM25);
  main.variable(observer()).define(["md"], _98);
  main.variable(observer("fetchNeoNatal")).define("fetchNeoNatal", ["agregacoes","municipios","datasource_sim"], _fetchNeoNatal);
  main.variable(observer("fetchRelParto")).define("fetchRelParto", ["agregacoes","municipios","datasource_sim"], _fetchRelParto);
  main.variable(observer("procNeoNatal")).define("procNeoNatal", ["procTOTALUnfiltered","semanas_epidemiologicas"], _procNeoNatal);
  main.variable(observer("procRelParto")).define("procRelParto", ["procTOTALUnfiltered","semanas_epidemiologicas"], _procRelParto);
  main.variable(observer("procTOTALUnfiltered")).define("procTOTALUnfiltered", ["semanas_epidemiologicas"], _procTOTALUnfiltered);
  main.variable(observer("procFetalUnfiltered")).define("procFetalUnfiltered", ["semanas_epidemiologicas"], _procFetalUnfiltered);
  main.variable(observer("fetchTOTAL")).define("fetchTOTAL", ["agregacoes","municipios","datasource_sim"], _fetchTOTAL);
  main.variable(observer("fetchFetal")).define("fetchFetal", ["agregacoes","municipios","datasource_sim"], _fetchFetal);
  main.variable(observer("procTOTAL")).define("procTOTAL", ["procTOTALUnfiltered","semanas_epidemiologicas"], _procTOTAL);
  main.variable(observer("procFetal")).define("procFetal", ["procFetalUnfiltered","semanas_epidemiologicas"], _procFetal);
  main.variable(observer()).define(["md"], _109);
  main.variable(observer("Sortable")).define("Sortable", ["require"], _Sortable);
  main.variable(observer("d3_5")).define("d3_5", ["require"], _d3_5);
  main.variable(observer("slider_snap")).define("slider_snap", ["layout","d3_5","DOM","months","semanas_epidemiologicas","mutable sel","d3"], _slider_snap);
  main.variable(observer("layout")).define("layout", _layout);
  main.variable(observer("style_slider")).define("style_slider", ["html"], _style_slider);
  const child1 = runtime.module(define1);
  main.import("menuMortalidade", "ampliaMenu", child1);
  main.import("datasource_sim", child1);
  main.variable(observer("lz")).define("lz", ["require"], _lz);
  main.variable(observer("style_menu")).define("style_menu", ["html"], _style_menu);
  main.variable(observer("novoMenuMun")).define("novoMenuMun", ["html","agregacoes","municipios"], _novoMenuMun);
  main.variable(observer("styleMenuMun")).define("styleMenuMun", ["html"], _styleMenuMun);
  main.variable(observer("initializeMenuMun")).define("initializeMenuMun", ["novoMenuMun"], _initializeMenuMun);
  return main;
}

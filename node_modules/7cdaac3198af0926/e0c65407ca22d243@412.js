function _1(md){return(
md`# Amplia Saude - Fonte de Dados e Menu - AGO2022`
)}

function _2(md){return(
md`## Menu Amplia`
)}

function _ampliaMenu(Event){return(
function ampliaMenu(menuData,abaSelecionada) {

    const legendaConsultaPrincipal = `<svg width="19" height="10" viewBox="0 0 19 10" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M2 8C2 6 2.39956 2 5.9956 2C11.2138 2 8.9923 8 12.9879 8C17.4829 8 16.9835 4 16.9835 2" stroke="#151472" stroke-width="3"/>
</svg>`;

  const legendaComparacao = `<svg width="17" height="8" viewBox="0 0 17 8" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M1 7C1 5 1.39956 1 4.9956 1C10.2138 1 7.9923 7 11.9879 7C16.4829 7 15.9835 3 15.9835 1" stroke="#151472" stroke-width="1.5" stroke-dasharray="2.5 1"/>
</svg>`;

  
    function style() {
      const s = document.createElement('style');
      s.textContent = `                  
          div.menuAbas {
            --corFundoItemAberto: #F4F4F4;
            --corAltaInfluencia: #B90404;
            --corFonte: #151472;
            --corFonteDesabilitada: #aaa;

            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;     
            display: grid;
            grid-template-columns: 1fr;
            width: 100%;
            font-family: "Roboto Condensed";  
            color: var(--corFonte);
            margin: 0px 0px;
          }

          div.menuAbas div.abas {
            grid-column: 1 / 2;
            grid-row: 1 / 2;
            font-size: 14px;
            display: grid;
            grid-template-columns: repeat(4,1fr);
            gap: 1px;
          }

          div.menuAbas div.abas div.aba {
            position: relative;
            background-color: #F4F4F4;
            text-align: center;
            padding: 8px 0;
            font-weight: 700;
            border-radius: 6px 6px 0 0;
          }

          div.menuAbas div.abas div.aba.desabilitada {
              color: var(--corFonteDesabilitada);
          }

          div.menuAbas div.abas div.aba.selecionada {
            background-color: #E5E5E5;
            box-shadow: 2px -2px 6px rgba(0, 0, 0, 0.25);
            z-index: 2;
          }

          div.menuAbas div.menuCompacto {
            grid-column: 1 / 2;
            grid-row: 2 / 3;
            display: grid;
            grid-template-columns: 80px repeat(${menuData.length},85px) 8px;
            gap: 10px;
            width: fit-content;
          }

          div.menuAbas div.background-1 {
            grid-column: 1 / 2;
            grid-row: 2 / 3;
            z-index: 1;
          }

          div.principal div.background-1 {
            box-shadow: 2px -2px 6px rgba(0, 0, 0, 0.25);
          }

          div.menuAbas div.background-2 {
            grid-column: 1 / 2;
            grid-row: 2 / 3;
            background-color: var(--corFundoMenu);
            z-index: 3;
          }

          div.menuAbas .legenda {
            display: flex;
            flex-direction: column;
            background-color: var(--corFundoItemAberto);
            padding: 7px 5px 3px 5px;
            font-size: 12px;
            line-height: 1;
            z-index: 4;
          }

          div.menuAbas .legenda .titulo {
            text-align: center;
            min-height: 18px;
          }

          div.menuAbas .legenda .icone {
            padding-top: 5px;
            text-align: center;
          }

          div.itemMenuCompacto {
            display: flex;
            flex-direction: column;
            background-color: var(--corFundoMenu);
            padding: 7px 5px 3px 5px;
            font-size: 12px;
            line-height: 1;
            grid-row-start: 1;
            grid-row-end: 2;  
            border-radius: 5px 5px 0 0;
            transition: background-color 1s, box-shadow 1s;
            z-index: 4;
            justify-content: end;
          }

          div.itemMenuCompacto.aberto {
            box-shadow: 0px 6px 0px 0px #F4F4F4, 2px 0px 4px #00000030;
            background-color: var(--corFundoItemAberto);
          }

          div.itemMenuCompacto div.titulo {
            font-weight: 300;
            text-transform: uppercase;
            text-align: center;
            white-space: nowrap;
          }

          div.itemMenuCompacto div.titulo.selecionado {
            font-weight: 700;
          }

          div.itemMenuCompacto div.valoresSelecionados {
            display: flex;
            flex-direction: row-reverse;
            flex-wrap: nowrap;
            justify-content: center;
            align-items: center; 
            line-height: 20px;
          }

          div.itemMenuCompacto div.valoresSelecionados div.textoValoresSelecionados {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;  
          }

          div.itemMenuCompacto div.valoresSelecionados div.icone {
            display: inline;
            font-family: 'Material Icons';
            font-weight: normal;
            font-style: normal;
            font-size: 24px;
            line-height: 0.8;
            letter-spacing: normal;
            text-transform: none;
            padding: 0px;
            white-space: nowrap;
            word-wrap: normal;
            direction: ltr;
            transform: rotate(0deg);
            transition: transform 1s;
            -webkit-font-feature-settings: 'liga';
            -webkit-font-smoothing: antialiased;
          }

          div.itemMenuCompacto.aberto div.valoresSelecionados div.icone {
            transform: rotate(-180deg);
          }

          div.menuCompacto .submenu {
            box-shadow: 2px -2px 4px #00000030;
            position: relative;
            background-color: var(--corFundoItemAberto);
            grid-row-start: 1;
            grid-row-end: 2;
            top: 20px;
            height: 6px;
            opacity: 0;
            transition: top 1s, opacity 1s;
            z-index: 3;
          }

          div.menuCompacto .submenu::after {
            content: "";
            position: absolute;
            display: block;
            background-color: var(--corFundoItemAberto);
            box-shadow: none;
            top: calc(100% - 12px);
            width: 100%;
            height: 12px;
          }

          div.menuCompacto .submenu.aberto {
            top: 100%;
            opacity: 1;
          }

          div.menuCompacto .submenu .itens {
            box-shadow: 2px -2px 4px #00000030;
            position: absolute;
            left: 50%;
            top: 100%;
            transform: translate(-50%,0);
            background-color: var(--corFundoItemAberto);
            padding: 8px 10px 8px 20px;
            border-radius: 6px;
            margin-top: 0px;
            display: flex;
            width: fit-content;
            gap: 25px;
          }

          div.menuCompacto .submenu.aberto .itens {
          }

          div.menuCompacto .submenu .itens.i0.ABA0 {
            transform: translate(-30%,0);
          }

          div.menuCompacto .submenu .itens.i1.ABA0 {
            left: 50%;
            transform: translate(-20%,0);
          }

          div.menuCompacto .submenu .itens.i10.ABA0 {
            transform: translate(-60%,0);
          }

          div.menuCompacto .submenu .itens.i12.ABA0 {
            transform: translate(-80%,0);
          }

          div.menuCompacto .submenu .itens.i0.ABA1 {
            transform: translate(-30%,0);
          }

          div.menuCompacto .submenu .itens.i1.ABA1 {
            left: 50%;
            transform: translate(-20%,0);
          }

          div.menuCompacto .submenu .itens.i10.ABA1 {
            transform: translate(-60%,0);
          }

          div.menuCompacto .submenu .itens.i12.ABA1 {
            transform: translate(-80%,0);
          }

          div.menuCompacto .submenu .itens.i0.ABA2 {
            transform: translate(-30%,0);
          }

          div.menuCompacto .submenu .itens.i3.ABA2 {
            transform: translate(-30%,0);
          }

          div.menuCompacto .submenu .itens .item {
            display: flex;
            align-items: center;
            white-space: nowrap;
            gap: 6px;
          }

          div.menuCompacto .submenu .itens .item label {
            font-size: 12px;
          }

          div.menuCompacto .submenu .itens .item input {
            -webkit-appearance: none;
            appearance: none;
            margin: 0px;
            width: 17px;
            height: 17px;
            border: 3px var(--corFonte) solid;
          }

          div.menuCompacto .submenu .itens .item input[type=radio] {
            border-radius: 50%;
          }

          div.menuCompacto .submenu .itens .item input:checked {
            background-color: var(--corFonte);  
          }

          div.menuCompacto .submenu .itens .item input:focus {
            outline: 0;  
          }

          div.menuCompacto .submenu .itens .item input[type=checkbox] {
            border-radius: 2px;
          }  
      `;
      return s;
  }

  let nextId = 0;
  const SYMB_SUBMENU = Symbol();
  const SYMB_UPDATE = Symbol();
  const SYMB_ITEM = Symbol();
  
  function menuBase(mp, selectedOptions, corTrilha, principal) {
    selectedOptions = selectedOptions || "";
    const root = document.createElement('div');
    
    let value = { };
    let texto = { };
    let urlids = { };

    Object.defineProperty(value, 'expression', {
      get() {
        let resp = {};
        for(let p in value) {
          let e = value[p];
          if(p != 'expression') {
            resp[e[0]] = e[1];
          }
        }
        return resp;
      }
    });

    Object.defineProperty(value, 'urlids', {
      get() {
        let resp = [];
        for(let k in urlids) {
          resp.push(urlids[k]);
        }
        return resp.join("");
      }
    });

    
    function createItemMenuCompacto(menuCompacto, data, i) {
      const prefix = 'm' + ++nextId;
      const itemMenuCompacto = document.createElement('div');
      const titulo = document.createElement('div');
      const divWrapper = document.createElement('div');
      const valoresSelecionados = document.createElement('div');
      const textoValoresSelecionados = document.createElement('div');
      const icone = document.createElement('div');
      const submenu = document.createElement('div');
      const itens = document.createElement('div');
      const colStart = i+2;

      value[data.varName] = "";
      texto[data.varName] = "";
      urlids[data.varName] = "";     

      let elements = [];

      itemMenuCompacto[SYMB_UPDATE] = function() {
        let selecao = elements.filter(e => e.checked).map(e => e.value);
        let expression = elements.filter(e => e.checked).map(e => e[SYMB_ITEM].expression);
        let ids = elements.filter(e => e.checked).map(e => e[SYMB_ITEM].urlid);
        value[data.varName] = [data.attrIndex, expression];
        urlids[data.varName] = ids.join("");
        if(selecao.length) {
          titulo.classList.add('selecionado');
        }
        else {
          titulo.classList.remove('selecionado');
        }
        let valorSelecionado = selecao.join(" ou ");
        textoValoresSelecionados.innerHTML = valorSelecionado;
        textoValoresSelecionados.setAttribute("title", valorSelecionado);
        texto[data.varName] = valorSelecionado;
      }
      
      function updateValues() {
        itemMenuCompacto[SYMB_UPDATE]();
        root.dispatchEvent(new Event('input'));
      }

      itemMenuCompacto.classList.add('itemMenuCompacto');
      itemMenuCompacto.classList.add(data.varName);
      titulo.classList.add('titulo');
      titulo.innerHTML = data.title;
      valoresSelecionados.classList.add('valoresSelecionados');
      textoValoresSelecionados.classList.add('textoValoresSelecionados');
      icone.classList.add('icone');
      icone.innerHTML = 'expand_more';
      itemMenuCompacto.append(titulo);
      divWrapper.append(valoresSelecionados);
      itemMenuCompacto.append(divWrapper);
      valoresSelecionados.append(icone);
      valoresSelecionados.append(textoValoresSelecionados);
      submenu.classList.add('submenu');
      submenu.style['grid-column'] = colStart + '/' + (colStart+1);
      itens.classList.add('itens');
      itens.classList.add('i'+i);
      itens.classList.add('ABA'+abaSelecionada);
      submenu.append(itens);
      itemMenuCompacto[SYMB_SUBMENU] = submenu;
      itemMenuCompacto.style['grid-column-start'] = colStart;

      itemMenuCompacto.addEventListener('click', ev => {
        if(itemMenuCompacto.classList.contains('aberto')) {
          itemMenuCompacto.classList.remove('aberto');
          submenu.classList.remove('aberto');
        } else {
          const aberto = itemMenuCompacto.parentNode.querySelector(".aberto");
          if(aberto) {
            aberto.classList.remove('aberto');
            aberto[SYMB_SUBMENU].classList.remove('aberto');
          }    
          itemMenuCompacto.classList.add('aberto');
          submenu.classList.add('aberto');
        }
      });

      let lastSelected = null;
      data.itens.forEach((item,i) => {
        const div = document.createElement('div');
        const label = document.createElement('label');
        const input = document.createElement('input');
        label.innerHTML = item.name;
        label.setAttribute('for', prefix+i);
        input.setAttribute("type", data.input);
        input.setAttribute('value', item.name);
        if(selectedOptions.indexOf(item.urlid)>=0) {
          input.setAttribute('checked','checked');
        }
        input.setAttribute('id', prefix+i);
        input.setAttribute('name', data.input === 'radio' ? prefix : prefix+i);
        input[SYMB_ITEM] = item;
        div.classList.add('item');
        div.append(input);
        div.append(label);
        itens.append(div);
        elements.push(input);
        input.addEventListener('input', ev => {
          ev.stopPropagation();
          updateValues();
        })
        if(data.input == "radio") {
          input.addEventListener('click', ev => {
            if(ev.target === lastSelected) {
              ev.target.checked = false;
              lastSelected = null;
              updateValues();
              return;
            }
            lastSelected = ev.target;
          });
        }
      });
      menuCompacto.append(itemMenuCompacto);
      menuCompacto.append(submenu);
      itemMenuCompacto[SYMB_UPDATE]();
    }

    const divMenuAbas = document.createElement('div');
    const divAbas = document.createElement('div');
    const divMenuCompacto = document.createElement('div');
    const divLegenda = document.createElement('div');
    const divBackground1 = document.createElement('div');
    const divBackground2 = document.createElement('div');

    
    divMenuAbas.classList.add('menuAbas');
    divAbas.classList.add('abas');
    divLegenda.classList.add('legenda');
    divMenuCompacto.classList.add('menuCompacto');
    divBackground1.classList.add('background-1');
    divBackground2.classList.add('background-2');

    divMenuAbas.append(divAbas);
    divMenuAbas.append(divMenuCompacto);
    divMenuAbas.append(divBackground1);
    divMenuAbas.append(divBackground2);
    divMenuCompacto.append(divLegenda);

    divMenuAbas.setAttribute("style",`--corFundoMenu: ${corTrilha};`);
    if(principal) {
      divMenuAbas.classList.add("principal");
    }
        
    menuData.forEach((itemData,i) => {
      createItemMenuCompacto(divMenuCompacto,itemData,i);
    });

    const shadow = root.attachShadow({mode:'open'});  
    shadow.append(style());
    shadow.append(divMenuAbas);

    root.cloneMenu = function() {
      let inputs = divMenuCompacto.querySelectorAll('input:checked');
      let newMenu = local(mp);
      let newInputs = newMenu.shadowRoot.querySelectorAll('input');
      for(let i=0; i<inputs.length; i++) {
        for(let j=0; j<newInputs.length; j++) {
          if(inputs[i][SYMB_ITEM] === newInputs[j][SYMB_ITEM]) {
            newInputs[j].checked = true;
          }
        }
      }
      let itens = newMenu.shadowRoot.querySelectorAll('.itemMenuCompacto');
      for(let i=0; i<itens.length; i++) {
        itens[i][SYMB_UPDATE]();          
      }
      return newMenu;
    }
    
    Object.defineProperty(root, 'value', {
      get() {
        return value;
      }
    });

     Object.defineProperty(root, 'texto', {
      get() {
        return texto;
      }
    });
    
    return [ root, divAbas, divLegenda ];
  }

  function principal(selectedItens)
  {
      let [ root, divAbas, divLegenda ] = menuBase(null,selectedItens,'#E5E5E5',true); 
      let divAba;
      divAba = document.createElement('div');
      divAba.classList.add('aba');
      if(abaSelecionada === 0) {
        divAba.classList.add('selecionada');
      }
      divAba.addEventListener('click',ev=>{
        root.dispatchEvent(new CustomEvent('aba',{detail:{index:1}}));
      });
      divAba.innerHTML = 'NASCIDOS VIVOS';
      divAbas.append(divAba);

      divAba = document.createElement('div');
      divAba.classList.add('aba');
      if(abaSelecionada === 1) {
        divAba.classList.add('selecionada');
      }
      divAba.addEventListener('click',ev=>{
        root.dispatchEvent(new CustomEvent('aba',{detail:{index:2}}));
      });
      divAba.innerHTML = 'CARACTERÍSTICAS DO NASCIMENTO';
      divAbas.append(divAba);

      divAba = document.createElement('div');
      divAba.classList.add('aba');
      if(abaSelecionada === 2) {
        divAba.classList.add('selecionada');
      }
      divAba.addEventListener('click',ev=>{
        root.dispatchEvent(new CustomEvent('aba',{detail:{index:3}}));
      });
      divAba.innerHTML = 'MORTALIDADE PERINATAL E INFANTIL';
      divAbas.append(divAba);

      divAba = document.createElement('div');
      divAba.classList.add('aba');
      if(abaSelecionada === 3) {
        divAba.classList.add('selecionada');
      }
      divAba.addEventListener('click',ev=>{
        root.dispatchEvent(new CustomEvent('aba',{detail:{index:4}}));
      });
      divAba.innerHTML = 'SAÚDE DA GESTANTE';
      divAba.classList.add('desabilitada');
      divAbas.append(divAba);

      let divTituloLegenda = document.createElement("div");
      let divIconeLegenda = document.createElement("div");
      divTituloLegenda.classList.add("titulo");
      divIconeLegenda.classList.add("icone");
      divIconeLegenda.innerHTML = legendaConsultaPrincipal;
      divTituloLegenda.innerHTML="CONSULTA<br>PRINCIPAL";
      divLegenda.append(divTituloLegenda);
      divLegenda.append(divIconeLegenda);
      return root;
  }

  function local(mp, selectedItens, corTrilha)
  {
      let [ root, _ , divLegenda ]  = menuBase(null,selectedItens,corTrilha,false);
      let mc = root.shadowRoot.querySelector(".menuCompacto");
      mc.style['grid-template-columns'] = `110px repeat(${menuData.length},84px) 0px`;
      mc.style['gap'] = '2px';
      divLegenda.style['background-color'] = '#ffffff66';
      divLegenda.style['color'] = 'var(--corFonte)';
      divLegenda.style['border-radius'] = '0px 0px 0px 8px';
      let divTituloLegenda = document.createElement("div");
      let divIconeLegenda = document.createElement("div");
      divTituloLegenda.classList.add("titulo");
      divTituloLegenda.innerHTML = "&nbsp";
      divIconeLegenda.classList.add("icone");
      divIconeLegenda.innerHTML = legendaComparacao;
      divLegenda.append(divTituloLegenda);
      divLegenda.append(divIconeLegenda);
      return root;
  }
  
  return { principal, local };
  
}
)}

function _4(md){return(
md`### Nascidos Vivos`
)}

function _mp(menuNascidosVivos){return(
menuNascidosVivos.principal()
)}

function _dadosMenuNascidosVivos(){return(
[
    {
      title: 'PESO AO<br>NASCER',
      varName: 'PESO',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 0,
      itens: [
        { name: 'Normal', style: [], expression: [3], urlid: 'A' },
        { name: 'Baixo peso', style: ['alta-influencia'], expression: [2], urlid: 'B' },
        { name: 'Muito baixo peso', style: ['alta-influencia'], expression: [1], urlid: 'C' },
        { name: 'Ignorado', style: [], expression: [0], urlid: 'E' }
      ]
    },

    {
      title: 'IDADE<br>GESTACIONAL',
      varName: 'IDADE_GESTACIONAL',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 1,
      itens: [
        { name: 'Pós-termo', style: [], expression: [7], urlid:'F'  },
        { name: 'A termo tardio', style: [], expression: [6], urlid:'G' },
        { name: 'A termo completo', style: [], expression: [5], urlid:'H' },
        { name: 'A termo precoce', style: [], expression: [4], urlid:'I' },
        { name: 'Pré-termo moderado', style: ['alta-influencia'], expression: [3], urlid:'W' }, 
        { name: 'Muito pré-termo', style: ['alta-influencia'], expression: [2], urlid:'X' },
        { name: 'Pré-termo extremo', style: ['alta-influencia'], expression: [1], urlid:'7' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'6'}
      ]
    },

    {
      title: 'ADEQUAÇÃO À<br>IDADE GESTAC.',
      varName: 'ADEQ_IDADE_GESTACIONAL',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 2,
      itens: [
        { name: 'GIG', style: [], expression: [3],urlid:'J' },
        { name: 'AIG', style: ['alta-influencia'], expression: [2],urlid:'K' },
        { name: 'PIG', style: ['alta-influencia'], expression: [1],urlid:'L' },
        { name: 'Ignorado', style: [], expression: [0],urlid:'M' }
      ]
    },

    {
      title: 'SEXO',
      varName: 'SEXO',
      ordinal: false,
      input: 'checkbox',
      attrIndex: 3,
      itens: [
        { name: 'Feminino', style: [], expression: [2], urlid:'N' },
        { name: 'Masculino', style: [], expression: [1], urlid:'O' },
        { name: 'Indeterminado', style: [], expression: [0], urlid:'P' }
      ]
    },

    {
      title: 'ANOMALIA<br>CONGÊNITA',
      varName: 'ANOMAL_CONGENITA',
      ordinal: false,
      input: 'radio',
      attrIndex: 4,
      itens: [
        { name: 'Não', style: [], expression: [2], urlid:'Q' },
        { name: 'Sim', style: ['alta-influencia'], expression: [1], urlid:'R' },
      ]
    },

    {
      title: 'RAÇA/COR<br>DA MÃE',
      varName: 'RACA_COR_MAE',
      ordinal: false,
      input: 'checkbox',
      attrIndex: 5,
      itens: [
        { name: 'Branca', style: [], expression: [1], urlid:'S' },
        { name: 'Preta ou Parda', style: [], expression: [2,4], urlid:'T' },
        { name: 'Outros', style: [], expression: [3,4,5], urlid:'U' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'V' }
      ]
    },

/*    {
      title: 'ESCOLARIDADE<br>DA MÃE',
      varName: 'ESCOLARIDADE_MAE',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 6,
      itens: [
        { name: 'Superior', style: [], expression: [7], urlid:'Y' },
        { name: 'Ensino médio', style: [], expression: [6], urlid:'Z' },
        { name: 'Fund. II completo', style: [], expression: [5], urlid:'a' },
        { name: 'Fund. II incompleto', style: [], expression: [4], urlid:'b' },
        { name: 'Fund. I completo', style: [], expression: [3], urlid:'c' },
        { name: 'Fund. I incompleto', style: [], expression: [2], urlid:'d' },
        { name: 'Sem', style: [], expression: [1], urlid:'e' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'f' }
      ]
    },
*/
    {
      title: 'ESCOLARIDADE<br>DA MÃE',
      varName: 'ESCOLARIDADE_MAE',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 6,
      itens: [
        { name: 'Superior', style: [], expression: [7], urlid:'Y' },
        { name: 'Ensino médio', style: [], expression: [6], urlid:'Z' },
        { name: 'Fundamental completo', style: [], expression: [5], urlid:'a' },
        { name: 'Fundamental incompleto', style: [], expression: [4,3,2], urlid:'b' },
        { name: 'Sem', style: [], expression: [1], urlid:'e' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'f' }
      ]
    },
  
    {
      title: 'ESTADO CIVIL<br>DA MÃE',
      varName: 'ESTADO_CIVIL_MAE',
      ordinal: false,
      input: 'checkbox',
      attrIndex: 7,
      itens: [
        { name: 'Solteira', style: [], expression: [1], urlid:'g' },
        { name: 'Casada ou união estável', style: [], expression: [2], urlid:'h' },
        { name: 'Viúva', style: [], expression: [3], urlid:'i' },
        { name: 'Separada ou divorcidada', style: [], expression: [4], urlid:'j' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'k' }
      ]
    },

    {
      title: 'IDADE<br>DA MÃE',
      varName: 'IDADE_MAE',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 8,
      itens: [
        { name: '10-14', style: [], expression: [1], urlid:'l' },
        { name: '15-19', style: [], expression: [2], urlid:'m' },
        { name: '20-29', style: [], expression: [3], urlid:'n' },
        { name: '30-39', style: [], expression: [4], urlid:'o' },
        { name: '40-49', style: ['alta-influencia'], expression: [5], urlid:'p' },
        { name: '50+', style: ['alta-influencia'], expression: [6], urlid:'q' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'r' }
      ]
    },

    {
      title: 'CONSULTAS<BR>DE PRÉ NATAL',
      varName: 'CONSULTAS',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 9,
      itens: [
        { name: '7+', style: [], expression: [4], urlid:'s' },
        { name: '4 a 6', style: [], expression: [3], urlid:'t' },
        { name: '1 a 3', style: ['alta-influencia'], expression: [2], urlid:'u' },
        { name: '0', style: ['alta-influencia'], expression: [1], urlid:'v' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'w' }
      ]
    },

    {
      title: 'TIPO<br>PARTO',
      varName: 'PARTO',
      ordinal: false,
      input: 'checkbox',
      attrIndex: 10,      
      itens: [
        { name: 'Vaginal', style: [], expression: [1], urlid:'x' },
        { name: 'Cesário', style: [], expression: [2], urlid:'y' },
        { name: 'Indeterminado', style: [], expression: [0], urlid:'z' }
      ]
    },

    {
      title: 'TRAB PARTO<br>INDUZIDO',
      varName: 'STTRABPART',
      ordinal: false,
      input: 'radio',
      attrIndex: 11,
      itens: [
        { name: 'SIM', style: [], expression: [1], urlid:'9' },
        { name: 'NÃO', style: [], expression: [2], urlid:'8' },
      ]
    },/*
    {
      title: 'KOTEL<br>CHUCK',
      varName: 'KOTELCHUCK',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 12,
      itens: [
        { name: '1', style: [], expression: [1], urlid:'5' },
        { name: '2', style: [], expression: [2], urlid:'4' },
        { name: '3', style: [], expression: [3], urlid:'3' },
        { name: '4', style: [], expression: [4], urlid:'2' },
        { name: '5', style: [], expression: [5], urlid:'1' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'0' },
      ]
    },*/
    {
      title: 'ADEQUAÇÃO<br>PRÉ NATAL',
      varName: 'KOTELCHUCK',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 12,
      itens: [
        { name: 'Não fez', style: ['alta-influencia'], expression: [1], urlid:'5' },
        { name: 'Inadequado', style: ['alta-influencia'], expression: [2], urlid:'4' },
        { name: 'Intermediário', style: [], expression: [3], urlid:'3' },
        { name: 'Adequado', style: [], expression: [4], urlid:'2' },
        { name: 'Mais que adequado', style: [], expression: [5], urlid:'1' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'0' },
      ]
    },

  ]
)}

function _menuNascidosVivos(ampliaMenu,dadosMenuNascidosVivos){return(
ampliaMenu(dadosMenuNascidosVivos,0)
)}

function _8(md){return(
md`### Características do Nascimento`
)}

function _cn(menuCaracteristicasNascimento){return(
menuCaracteristicasNascimento.principal()
)}

function _dadosMenuCaracteristicasNascimento(){return(
[
    {
      title: 'PESO AO<br>NASCER',
      varName: 'PESO',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 0,
      itens: [
        { name: 'Normal', style: [], expression: [3], urlid: 'A' },
        { name: 'Baixo peso', style: ['alta-influencia'], expression: [2], urlid: 'B' },
        { name: 'Muito baixo peso', style: ['alta-influencia'], expression: [1], urlid: 'C' },
        { name: 'Ignorado', style: [], expression: [0], urlid: 'E' }
      ]
    },

    {
      title: 'IDADE<br>GESTACIONAL',
      varName: 'IDADE_GESTACIONAL',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 1,
      itens: [
        { name: 'Pós-termo', style: [], expression: [7], urlid:'F'  },
        { name: 'A termo tardio', style: [], expression: [6], urlid:'G' },
        { name: 'A termo completo', style: [], expression: [5], urlid:'H' },
        { name: 'A termo precoce', style: [], expression: [4], urlid:'I' },
        { name: 'Pré-termo tardio', style: ['alta-influencia'], expression: [3], urlid:'W' }, 
        { name: 'Pré-termo moderado', style: ['alta-influencia'], expression: [2], urlid:'X' },
        { name: 'Muito pré-termo', style: ['alta-influencia'], expression: [1], urlid:'7' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'6'}
      ]
    },

    {
      title: 'ADEQUAÇÃO À<br>IDADE GESTAC.',
      varName: 'ADEQ_IDADE_GESTACIONAL',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 2,
      itens: [
        { name: 'GIG', style: [], expression: [3],urlid:'J' },
        { name: 'AIG', style: ['alta-influencia'], expression: [2],urlid:'K' },
        { name: 'PIG', style: ['alta-influencia'], expression: [1],urlid:'L' },
        { name: 'Ignorado', style: [], expression: [0],urlid:'M' }
      ]
    },

    {
      title: 'SEXO',
      varName: 'SEXO',
      ordinal: false,
      input: 'checkbox',
      attrIndex: 3,
      itens: [
        { name: 'Feminino', style: [], expression: [2], urlid:'N' },
        { name: 'Masculino', style: [], expression: [1], urlid:'O' },
        { name: 'Indeterminado', style: [], expression: [0], urlid:'P' }
      ]
    },

    {
      title: 'ANOMALIA<br>CONGÊNITA',
      varName: 'ANOMAL_CONGENITA',
      ordinal: false,
      input: 'radio',
      attrIndex: 4,
      itens: [
        { name: 'Não', style: [], expression: [2], urlid:'Q' },
        { name: 'Sim', style: ['alta-influencia'], expression: [1], urlid:'R' },
      ]
    },

    {
      title: 'RAÇA/COR<br>DA MÃE',
      varName: 'RACA_COR_MAE',
      ordinal: false,
      input: 'checkbox',
      attrIndex: 5,
      itens: [
        { name: 'Branca', style: [], expression: [1], urlid:'S' },
        { name: 'Preta ou Parda', style: [], expression: [2,4], urlid:'T' },
        { name: 'Outros', style: [], expression: [3,4,5], urlid:'U' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'V' }
      ]
    },

    {
      title: 'ESCOLARIDADE<br>DA MÃE',
      varName: 'ESCOLARIDADE_MAE',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 6,
      itens: [
        { name: 'Superior', style: [], expression: [7], urlid:'Y' },
        { name: 'Ensino médio', style: [], expression: [6], urlid:'Z' },
        { name: 'Fundamental completo', style: [], expression: [5], urlid:'a' },
        { name: 'Fundamental incompleto', style: [], expression: [4,3,2], urlid:'b' },
        { name: 'Sem', style: [], expression: [1], urlid:'e' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'f' }
      ]
    },

    {
      title: 'ESTADO CIVIL<br>DA MÃE',
      varName: 'ESTADO_CIVIL_MAE',
      ordinal: false,
      input: 'checkbox',
      attrIndex: 7,
      itens: [
        { name: 'Solteira', style: [], expression: [1], urlid:'g' },
        { name: 'Casada ou união estável', style: [], expression: [2], urlid:'h' },
        { name: 'Viúva', style: [], expression: [3], urlid:'i' },
        { name: 'Separada ou divorcidada', style: [], expression: [4], urlid:'j' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'k' }
      ]
    },

    {
      title: 'IDADE<br>DA MÃE',
      varName: 'IDADE_MAE',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 8,
      itens: [
        { name: '10-14', style: [], expression: [1], urlid:'l' },
        { name: '15-19', style: [], expression: [2], urlid:'m' },
        { name: '20-29', style: [], expression: [3], urlid:'n' },
        { name: '30-39', style: [], expression: [4], urlid:'o' },
        { name: '40-49', style: ['alta-influencia'], expression: [5], urlid:'p' },
        { name: '50+', style: ['alta-influencia'], expression: [6], urlid:'q' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'r' }
      ]
    },

    {
      title: 'APGAR<BR>5º MINUTO',
      varName: 'APGAR5',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 13,
      itens: [
        { name: 'Boa vitalidade', style: [], expression: [3], urlid:'s' },
        { name: 'Asfixia moderada', style: ['alta-influencia'], expression: [2], urlid:'t' },
        { name: 'Asfixia grave', style: ['alta-influencia'], expression: [1], urlid:'u' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'v' }
      ]
    },
  
    {
      title: 'TIPO<br>PARTO',
      varName: 'PARTO',
      ordinal: false,
      input: 'checkbox',
      attrIndex: 10,      
      itens: [
        { name: 'Vaginal', style: [], expression: [1], urlid:'x' },
        { name: 'Cesário', style: [], expression: [2], urlid:'y' },
        { name: 'Indeterminado', style: [], expression: [0], urlid:'z' }
      ]
    },

    {
      title: 'TRAB PARTO<br>INDUZIDO',
      varName: 'STTRABPART',
      ordinal: false,
      input: 'radio',
      attrIndex: 11,
      itens: [
        { name: 'SIM', style: [], expression: [1], urlid:'9' },
        { name: 'NÃO', style: [], expression: [2], urlid:'8' },
      ]
    },
    {
      title: 'ADEQUAÇÃO<br>PRÉ NATAL',
      varName: 'KOTELCHUCK',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 12,
      itens: [
        { name: 'Não fez', style: ['alta-influencia'], expression: [1], urlid:'5' },
        { name: 'Inadequado', style: ['alta-influencia'], expression: [2], urlid:'4' },
        { name: 'Intermediário', style: [], expression: [3], urlid:'3' },
        { name: 'Adequado', style: [], expression: [4], urlid:'2' },
        { name: 'Mais que adequado', style: [], expression: [5], urlid:'1' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'0' },
      ]
    },

  ]
)}

function _menuCaracteristicasNascimento(ampliaMenu,dadosMenuCaracteristicasNascimento){return(
ampliaMenu(dadosMenuCaracteristicasNascimento,1)
)}

function _12(md){return(
md`### Mortalidade Perinatal e infantil`
)}

function _mpi(menuMortalidade){return(
menuMortalidade.principal()
)}

function _dadosMenuMortalidade(){return(
[
    {
      title: 'PESO AO<br>NASCER',
      varName: 'PESO',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 1,
      itens: [
        { name: 'Normal', style: [], expression: [3], urlid: 'A' },
        { name: 'Baixo peso', style: ['alta-influencia'], expression: [2], urlid: 'B' },
        { name: 'Muito baixo peso', style: ['alta-influencia'], expression: [1], urlid: 'C' },
        { name: 'Ignorado.', style: [], expression: [0], urlid: 'E' }
      ]
    },

    {
      title: 'SEXO',
      varName: 'SEXO',
      ordinal: false,
      input: 'checkbox',
      attrIndex: 2,
      itens: [
        { name: 'Feminino', style: [], expression: [2], urlid:'N' },
        { name: 'Masculino', style: [], expression: [1], urlid:'O' },
        { name: 'Indeterminado', style: [], expression: [0], urlid:'P' }
      ]
    },


    {
      title: 'RAÇA/COR',
      varName: 'RACA_COR',
      ordinal: false,
      input: 'checkbox',
      attrIndex: 3,
      itens: [
        { name: 'Branca', style: [], expression: [1], urlid:'S' },
        { name: 'Preta ou Parda', style: [], expression: [2,4], urlid:'T' },
        { name: 'Outros', style: [], expression: [3,4,5], urlid:'U' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'V' }
      ]
    },

    {
      title: 'ESCOLARIDADE<br>DA MÃE',
      varName: 'ESCOLARIDADE_MAE',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 4,
      itens: [
        { name: 'Superior', style: [], expression: [7], urlid:'Y' },
        { name: 'Ensino médio', style: [], expression: [6], urlid:'Z' },
        { name: 'Fundamental completo', style: [], expression: [5], urlid:'a' },
        { name: 'Fundamental incompleto', style: [], expression: [4,3,2], urlid:'b' },
        { name: 'Sem', style: [], expression: [1], urlid:'e' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'f' }
      ]
    },

    {
      title: 'IDADE<br>DA MÃE',
      varName: 'IDADE_MAE',
      ordinal: true,
      input: 'checkbox',
      attrIndex: 5,
      itens: [
        { name: '10-14', style: [], expression: [1], urlid:'l' },
        { name: '15-19', style: [], expression: [2], urlid:'m' },
        { name: '20-29', style: [], expression: [3], urlid:'n' },
        { name: '30-39', style: [], expression: [4], urlid:'o' },
        { name: '40-49', style: ['alta-influencia'], expression: [5], urlid:'p' },
        { name: '50+', style: ['alta-influencia'], expression: [6], urlid:'q' },
        { name: 'Ignorado', style: [], expression: [0], urlid:'r' }
      ]
    },

  
    {
      title: 'TIPO<br>PARTO',
      varName: 'PARTO',
      ordinal: false,
      input: 'checkbox',
      attrIndex: 6,      
      itens: [
        { name: 'Vaginal', style: [], expression: [1], urlid:'x' },
        { name: 'Cesário', style: [], expression: [2], urlid:'y' },
        { name: 'Indeterminado', style: [], expression: [0], urlid:'z' }
      ]
    },

  ]
)}

function _menuMortalidade(ampliaMenu,dadosMenuMortalidade){return(
ampliaMenu(dadosMenuMortalidade,2)
)}

function _16(md){return(
md`### Saude da Gestante`
)}

function _17(md){return(
md`## DataSources`
)}

function _datasource(){return(
(function(){

    const urlbase = "https://storage.googleapis.com/amplia/ufs2/";

    const clPeso = 2;
    const clIdadeGestacional = 3;
    const clAdequacaoPesoIdadeGestacional = 4;
    const clSexo = 5;
    const clAnomaliaCongenita = 6;
    const clRacaCorMae = 7;
    const clEscolaridadeMae = 8;
    const clEstadoCivilMae = 9;
    const clIdadeMae = 10;
    const clConsultas = 11;
    const clParto = 12;
    const clTrabalhoPartoInduzido = 13;
    const clKotelChuck = 14;
    const clApgar5 = 15;
    const clTpRobson = 16;
    const cmp = (a,b)=>(a.data<b.data?-1:a.data>b.data?1:0);

    const PIG = 1;
    const AIG = 2;
    const GIG = 3;

    const ROBSON1_4 = 1;
    const ROBSON5 = 2;
    const ROBSON6_10 = 3;

    const bitsA = [2, 3, 2, 2, 2, 3, 3, 3, 3, 3, 2, 2]
    const bitsB = [3, 2, 2]
  
    let globalIndexDV = null;

    async function getGlobalIndex() {
        if(globalIndexDV != null) {
            return globalIndexDV;
        }
        return await fetch(`${urlbase}index.dat`)
            .then(res=>res.arrayBuffer())
            .then(buffer=>(globalIndexDV=new DataView(buffer)))
        ;
    }   

    async function getMunInfo(codmun) {
        let dv = await getGlobalIndex();
        let n = dv.buffer.byteLength/12;
        let inicio = 0;
        let fim = n-1;
        while(inicio <= fim) {
            let meio = Math.floor((inicio+fim)/2);
            let cod = dv.getUint32(meio*12);
            if(codmun==cod) {
                return [ dv.getUint32(meio*12+4), dv.getUint32(meio*12+8) ];   
            }
            else if(codmun<cod) {
                fim = meio-1;
            }
            else {
                inicio = meio+1;
            }
        }
        return null;
    }

    function getRecord(dv,offset,i,filtro) {
        filtro = filtro || {};
        let base = (offset+i)*11;
        let data = dv.getUint32(base).toString();
        data = data.substring(0,4)+"-"+data.substring(4,6)+"-"+data.substring(6);
        let peso = dv.getUint16(base+4);
        let atributosA = dv.getUint32(base+6);
        let atributosB = dv.getUint8(base+10);
        let acc = 0;
        let valores = [];
        for(let j=0; j<bitsA.length; j++) {
            let v = ((((1<<bitsA[j])-1)<<acc)&atributosA)>>acc;
            valores.push(v);
            acc += bitsA[j];
        }
        acc = 0;
        for(let j=0; j<bitsB.length; j++) {
            let v = ((((1<<bitsB[j])-1)<<acc)&atributosB)>>acc;
            valores.push(v);
            acc += bitsB[j];
        }
        for(let j=0; j<valores.length; j++) {
            let v = valores[j];
            let f = filtro[j];
            let cond = true;
            if(f && f.length) {
                cond = false;
                for(let k=0; k<f.length && !cond; k++) {
                    cond = f[k].includes(v);
                }
            }
            if(!cond) {
                return [data];
            }
        }
        return [data, peso, ...valores];
    }
  
    function loadUF(cod) {
        let uf = cod;
        if(uf > 100000) {
            uf = Math.floor(cod/10000)
        }
        return fetch(`${urlbase}uf${uf}.dat`)
            .then(res=>res.arrayBuffer())
            .then(buffer=>new DataView(buffer))
            .then(async dv =>{
                let size, offset;
                if(cod>100000) {
                    [offset, size] = await getMunInfo(cod);
                } else {
                    offset = 0;
                    size = dv.buffer.byteLength/11;
                }
                return [dv, offset, size];
            })
        ;
    }


    function ajustaFiltro(filtro) {
      let resp = {};
      if(filtro) {
        for(let k in filtro) {
          resp[k] = filtro[k];
        }
      }
      return resp;
    }

  
    function fetchPeso(cod, filtro) {
        filtro = ajustaFiltro(filtro);      
        function processRecords(dv,offset,size) {
            let m = new Map();
            for(let i=0; i<size; i++) {
                let rec = getRecord(dv,offset,i,filtro);
                if(rec.length > 1) {
                    let tuple = m.get(rec[0]);
                    if(!tuple) {
                        tuple = [rec[1], 1];
                        m.set(rec[0],tuple);
                    } else {
                        tuple[0] += rec[1];
                        tuple[1]++;
                    }
                }
            }
            let resp = [];
            for(let [k,v] of m) {
                let t = {data:k,valor:v[0]/v[1],total:v[1]};
                resp.push(t);
            }
            resp.sort(cmp);
            return resp;
        }

        return loadUF(cod)
            .then(([dv,offset,size])=>{
                return processRecords(dv,offset,size);
            })
        ;
    }

    function fetchPIG(cod, filtro) {
        filtro = ajustaFiltro(filtro);
      
        function processRecords(dv,offset,size) {
            let m = new Map();
            for(let i=0; i<size; i++) {
                let rec = getRecord(dv,offset,i,filtro);
                let tuple = m.get(rec[0]);
                if(!tuple) {
                    tuple = [0,0,0,1];
                    m.set(rec[0],tuple);
                }
                else {
                    tuple[3]++;
                }
                if(rec.length>1) {
                    if(rec[clAdequacaoPesoIdadeGestacional] == PIG) {
                        tuple[0]++;
                    }
                    else if(rec[clAdequacaoPesoIdadeGestacional] == AIG) {
                        tuple[1]++;
                    }
                    else if(rec[clAdequacaoPesoIdadeGestacional] == GIG) {
                        tuple[2]++;
                    }
                }
            }
            let resp1 = [], resp2 = [];
            for(let [k,v] of m) {
                if(v[0] || v[1] || v[2]) {
                    resp1.push({data:k,ig:'PEQUENO',total:v[0]});
                    resp1.push({data:k,ig:'ADEQUADO',total:v[1]});
                    resp1.push({data:k,ig:'GRANDE',total:v[2]});
                }
                resp2.push({data:k,valor:v[3]});
            }
            resp1.sort(cmp);
            resp2.sort(cmp);
            return [resp1,resp2];
        }

        return loadUF(cod)
            .then(([dv,offset,size])=>{
                return processRecords(dv,offset,size);
            })
        ;
    }

    function fetchRobson(cod, filtro) {
        filtro = ajustaFiltro(filtro);
      
        function processRecords(dv,offset,size) {
            let m = new Map();
            for(let i=0; i<size; i++) {
                let rec = getRecord(dv,offset,i,filtro);
                let tuple = m.get(rec[0]);
                if(!tuple) {
                    tuple = [0,0,0,1];
                    m.set(rec[0],tuple);
                }
                else {
                    tuple[3]++;
                }
                if(rec.length>1) {
                    if(rec[clTpRobson] == ROBSON1_4) {
                        tuple[0]++;
                    }
                    else if(rec[clTpRobson] == ROBSON5) {
                        tuple[1]++;
                    }
                    else if(rec[clTpRobson] == ROBSON6_10) {
                        tuple[2]++;
                    }
                }
            }
            let resp1 = [], resp2 = [];
            for(let [k,v] of m) {
                if(v[0] || v[1] || v[2]) {
                    resp1.push({data:k,robson:'Robson1a4',total:v[0]});
                    resp1.push({data:k,robson:'Robson5',total:v[1]});
                    resp1.push({data:k,robson:'Robson6a10',total:v[2]});
                }
                resp2.push({data:k,valor:v[3]});
            }
            resp1.sort(cmp);
            resp2.sort(cmp);
            return [resp1,resp2];
        }

        return loadUF(cod)
            .then(([dv,offset,size])=>{
                return processRecords(dv,offset,size);
            })
        ;
    }

  
    function fetchTotal(cod, filtro) {

        filtro = ajustaFiltro(filtro);
      
        function processRecords(dv,offset,size) {
            let m = new Map();
            for(let i=0; i<size; i++) {
                let rec = getRecord(dv,offset,i,filtro);
                let tuple = m.get(rec[0]);
                if(!tuple) {
                    tuple = [0,1];
                    m.set(rec[0],tuple);
                }
                else {
                    tuple[1]++;
                }
                if(rec.length>1) {
                    tuple[0]++;
                }
            }
            let resp1 = [], resp2 = [];
            for(let [k,v] of m) {
                resp1.push({data:k,valor:v[0]});
                resp2.push({data:k,valor:v[1]});
            }
            resp1.sort(cmp);
            resp2.sort(cmp);
            return [resp1,resp2];
        }

        return loadUF(cod)
            .then(([dv,offset,size])=>{
                return processRecords(dv,offset,size);
            })
        ;
    }

    return {fetchTotal, fetchPIG, fetchPeso, fetchRobson}; 
})()
)}

function _datasource_sim(){return(
(function(){

    const urlbase = "https://storage.googleapis.com/amplia/sim-ufs/";

    const clIdade = 2;
    const clPeso = 3;
    const clSexo = 4;
    const clRacaCorMae = 5;
    const clEscolaridadeMae = 6;
    const clIdadeMae = 7;
    const clParto = 8;
    const clMorteParto = 9;

    const FETAL = 0
    const PRECOCE = 1
    const TARDIO = 2
    const POS = 3
    const ANTES = 1
    const DURANTE = 2
    const DEPOIS = 3
  
    const cmp = (a,b)=>(a.data<b.data?-1:a.data>b.data?1:0);

    const bits = [2,2,2,3,3,3,2,2]
  
    let globalIndexDV = null;

    async function getGlobalIndex() {
        if(globalIndexDV != null) {
            return globalIndexDV;
        }
        return await fetch(`${urlbase}index.dat`)
            .then(res=>res.arrayBuffer())
            .then(buffer=>(globalIndexDV=new DataView(buffer)))
        ;
    }   

    async function getMunInfo(codmun) {
        let dv = await getGlobalIndex();
        let n = dv.buffer.byteLength/12;
        let inicio = 0;
        let fim = n-1;
        while(inicio <= fim) {
            let meio = Math.floor((inicio+fim)/2);
            let cod = dv.getUint32(meio*12);
            if(codmun==cod) {
                return [ dv.getUint32(meio*12+4), dv.getUint32(meio*12+8) ];   
            }
            else if(codmun<cod) {
                fim = meio-1;
            }
            else {
                inicio = meio+1;
            }
        }
        return null;
    }

    function getRecord(dv,offset,i,filtro) {
        filtro = filtro || {};
        let base = (offset+i)*10;
        let data = dv.getUint32(base).toString();
        data = data.substring(0,4)+"-"+data.substring(4,6)+"-"+data.substring(6);
        let peso = dv.getUint16(base+4);
        let atributos = dv.getUint32(base+6);
        let acc = 0;
        let valores = [];
        for(let j=0; j<bits.length; j++) {
            let v = ((((1<<bits[j])-1)<<acc)&atributos)>>acc;
            valores.push(v);
            acc += bits[j];
        }
        for(let j=0; j<valores.length; j++) {
            let v = valores[j];
            let f = filtro[j];
            let cond = true;
            if(f && f.length) {
                cond = false;
                for(let k=0; k<f.length && !cond; k++) {
                    cond = f[k].includes(v);
                }
            }
            if(!cond) {
                return [data];
            }
        }
        return [data, peso, ...valores];
    }
  
    function loadUF(cod) {
        let uf = cod;
        if(uf > 100000) {
            uf = Math.floor(cod/10000)
        }
        return fetch(`${urlbase}uf${uf}.dat`)
            .then(res=>res.arrayBuffer())
            .then(buffer=>new DataView(buffer))
            .then(async dv =>{
                let size, offset;
                if(cod>100000) {
                    [offset, size] = await getMunInfo(cod);
                } else {
                    offset = 0;
                    size = dv.buffer.byteLength/10;
                }
                return [dv, offset, size];
            })
        ;
    }

    function ajustaFiltro(filtro) {
      let resp = {};
      if(filtro) {
        for(let k in filtro) {
          resp[k] = filtro[k];
        }
      }
      return resp;
    }

    function fetchNeoNatal(cod, filtro) {
        filtro = ajustaFiltro(filtro);        
      
        function processRecords(dv,offset,size) {
            let m = new Map();
            for(let i=0; i<size; i++) {
                let rec = getRecord(dv,offset,i,filtro);
                let tuple = m.get(rec[0]);
                if(!tuple) {
                    tuple = [0,0,0,1];
                    m.set(rec[0],tuple);
                }
                else {
                    tuple[3]++;
                }
                if(rec.length>1) {
                    if(rec[clIdade] == PRECOCE) {
                        tuple[0]++;
                    }
                    else if(rec[clIdade] == TARDIO) {
                        tuple[1]++;
                    }
                    else if(rec[clIdade] == POS) {
                        tuple[2]++;
                    }
                }
            }
            let resp1 = [], resp2 = [];
            for(let [k,v] of m) {
                if(v[0] || v[1] || v[2]) {
                    resp1.push({data:k,neonatal:'PRECOCE',total:v[0]});
                    resp1.push({data:k,neonatal:'TARDIO',total:v[1]});
                    resp1.push({data:k,neonatal:'NEOTOTAL',total:v[0]+v[1]});
                    resp1.push({data:k,neonatal:'POS',total:v[2]});
                }
                resp2.push({data:k,valor:v[3]});
            }
            resp1.sort(cmp);
            resp2.sort(cmp);
            return [resp1,resp2];
        }

        return loadUF(cod)
            .then(([dv,offset,size])=>{
                return processRecords(dv,offset,size);
            })
        ;
    }

    function fetchRelParto(cod, filtro) {
        filtro = ajustaFiltro(filtro);
      
        function processRecords(dv,offset,size) {
            let m = new Map();
            for(let i=0; i<size; i++) {
                let rec = getRecord(dv,offset,i,filtro);
                let tuple = m.get(rec[0]);
                if(!tuple) {
                    tuple = [0,0,0,1];
                    m.set(rec[0],tuple);
                }
                else {
                    tuple[3]++;
                }
                if(rec.length>1) {
                    if(rec[clMorteParto] == ANTES) {
                        tuple[0]++;
                    }
                    else if(rec[clMorteParto] == DURANTE) {
                        tuple[1]++;
                    }
                    else if(rec[clMorteParto] == DEPOIS) {
                        tuple[2]++;
                    }
                }
            }
            let resp1 = [], resp2 = [];
            for(let [k,v] of m) {
                if(v[0] || v[1] || v[2]) {
                    resp1.push({data:k,relparto:'ANTES',total:v[0]});
                    resp1.push({data:k,relparto:'DURANTE',total:v[1]});
                    resp1.push({data:k,relparto:'DEPOIS',total:v[2]});
                }
                resp2.push({data:k,valor:v[3]});
            }
            resp1.sort(cmp);
            resp2.sort(cmp);
            return [resp1,resp2];
        }

        return loadUF(cod)
            .then(([dv,offset,size])=>{
                return processRecords(dv,offset,size);
            })
        ;
    }

  
    function fetchFetal(cod, filtro) {
        filtro = ajustaFiltro(filtro);
        filtro[3] = [];

        function processRecords(dv,offset,size) {
            let m = new Map();
            for(let i=0; i<size; i++) {
                let rec = getRecord(dv,offset,i,filtro);
                let tuple = m.get(rec[0]);
                if(!tuple) {
                    tuple = [0,0,0,1];
                    m.set(rec[0],tuple);
                }
                else {
                    tuple[3]++;
                }
                if(rec.length>1) {
                    if(rec[clIdade] == FETAL) {
                        tuple[0]++;
                    }
                }
            }
            let resp1 = [], resp2 = [];
            for(let [k,v] of m) {
                if(v[0] || v[1] || v[2]) {
                    resp1.push({data:k,valor:v[0]});
                }
                resp2.push({data:k,valor:v[3]});
            }
            resp1.sort(cmp);
            resp2.sort(cmp);
            return [resp1,resp2];
        }

        return loadUF(cod)
            .then(([dv,offset,size])=>{
                return processRecords(dv,offset,size);
            })
        ;
    }
  

  function fetchTotal(cod, filtro) {

        filtro = ajustaFiltro(filtro);
      
        function processRecords(dv,offset,size) {
            let m = new Map();
            for(let i=0; i<size; i++) {
                let rec = getRecord(dv,offset,i,filtro);
                let tuple = m.get(rec[0]);
                if(!tuple) {
                    tuple = [0,1];
                    m.set(rec[0],tuple);
                }
                else {
                    tuple[1]++;
                }
                if(rec.length>1) {
                    tuple[0]++;
                }
            }
            let resp1 = [], resp2 = [];
            for(let [k,v] of m) {
                resp1.push({data:k,valor:v[0]});
                resp2.push({data:k,valor:v[1]});
            }
            resp1.sort(cmp);
            resp2.sort(cmp);
            return [resp1,resp2];
        }

        return loadUF(cod)
            .then(([dv,offset,size])=>{
                return processRecords(dv,offset,size);
            })
        ;
    }
  

    return {fetchNeoNatal, fetchFetal, fetchRelParto, fetchTotal}; 
})()
)}

function _20(md){return(
md`### Alguns testes com os datasources`
)}

function _21(datasource,cn){return(
datasource.fetchRobson(11,cn.expression)
)}

function _22(datasource,cn){return(
datasource.fetchPeso(11,cn.expression)
)}

function _municipios2(FileAttachment){return(
FileAttachment("municipios2.csv").csv()
)}

function _24(datasource_sim,mpi){return(
datasource_sim.fetchRelParto(35,mpi.expression)
)}

function _25(mpi){return(
mpi.expression
)}

function _26(datasource_sim,mpi){return(
datasource_sim.fetchFetal(35,mpi.expression)
)}

function _27(htl){return(
htl.html`<style>
  @import url(https://fonts.googleapis.com/css2?family=Roboto+Condensed:wght@300;400;700&display=swap);
  @import url(https://fonts.googleapis.com/icon?family=Material+Icons);    
</style>`
)}

export default function define(runtime, observer) {
  const main = runtime.module();
  function toString() { return this.url; }
  const fileAttachments = new Map([
    ["municipios2.csv", {url: new URL("./files/186949b230e46bbd80611c8b1224e2003c90fd71528ff034cabe25dc74445f782670632623e35cfdc778c27fcc6fce67fe7fc4e12ef7168cbf594a25934412d3.csv", import.meta.url), mimeType: "text/csv", toString}]
  ]);
  main.builtin("FileAttachment", runtime.fileAttachments(name => fileAttachments.get(name)));
  main.variable(observer()).define(["md"], _1);
  main.variable(observer()).define(["md"], _2);
  main.variable(observer("ampliaMenu")).define("ampliaMenu", ["Event"], _ampliaMenu);
  main.variable(observer()).define(["md"], _4);
  main.variable(observer("mp")).define("mp", ["menuNascidosVivos"], _mp);
  main.variable(observer("dadosMenuNascidosVivos")).define("dadosMenuNascidosVivos", _dadosMenuNascidosVivos);
  main.variable(observer("menuNascidosVivos")).define("menuNascidosVivos", ["ampliaMenu","dadosMenuNascidosVivos"], _menuNascidosVivos);
  main.variable(observer()).define(["md"], _8);
  main.variable(observer("viewof cn")).define("viewof cn", ["menuCaracteristicasNascimento"], _cn);
  main.variable(observer("cn")).define("cn", ["Generators", "viewof cn"], (G, _) => G.input(_));
  main.variable(observer("dadosMenuCaracteristicasNascimento")).define("dadosMenuCaracteristicasNascimento", _dadosMenuCaracteristicasNascimento);
  main.variable(observer("menuCaracteristicasNascimento")).define("menuCaracteristicasNascimento", ["ampliaMenu","dadosMenuCaracteristicasNascimento"], _menuCaracteristicasNascimento);
  main.variable(observer()).define(["md"], _12);
  main.variable(observer("viewof mpi")).define("viewof mpi", ["menuMortalidade"], _mpi);
  main.variable(observer("mpi")).define("mpi", ["Generators", "viewof mpi"], (G, _) => G.input(_));
  main.variable(observer("dadosMenuMortalidade")).define("dadosMenuMortalidade", _dadosMenuMortalidade);
  main.variable(observer("menuMortalidade")).define("menuMortalidade", ["ampliaMenu","dadosMenuMortalidade"], _menuMortalidade);
  main.variable(observer()).define(["md"], _16);
  main.variable(observer()).define(["md"], _17);
  main.variable(observer("datasource")).define("datasource", _datasource);
  main.variable(observer("datasource_sim")).define("datasource_sim", _datasource_sim);
  main.variable(observer()).define(["md"], _20);
  main.variable(observer()).define(["datasource","cn"], _21);
  main.variable(observer()).define(["datasource","cn"], _22);
  main.variable(observer("municipios2")).define("municipios2", ["FileAttachment"], _municipios2);
  main.variable(observer()).define(["datasource_sim","mpi"], _24);
  main.variable(observer()).define(["mpi"], _25);
  main.variable(observer()).define(["datasource_sim","mpi"], _26);
  main.variable(observer()).define(["htl"], _27);
  return main;
}
